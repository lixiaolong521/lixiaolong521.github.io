<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo及主题的相关配置</title>
    <url>/2022/11/22/Hexo%E5%8F%8A%E4%B8%BB%E9%A2%98%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>介绍如何安装Hexo及下载主题和配置主题，并且上传到Github成功访问</p>
<span id="more"></span>
<h2 id="1-下载Hexo"><a href="#1-下载Hexo" class="headerlink" title="1. 下载Hexo"></a>1. 下载Hexo</h2><p>打开cmd窗口  </p>
<pre><code>npm intall -g hexo
</code></pre>
<br/>

<h2 id="2-文件初始化"><a href="#2-文件初始化" class="headerlink" title="2. 文件初始化"></a>2. 文件初始化</h2><p>进入你要创建博客的文件夹中</p>
<pre><code>hexo init #初始化项目
hexo clean #清除缓存
hexo g #生成静态文件
hexo s #启动端口并预览 http://localhost:4000/
</code></pre>


<p><img src="/images/source/hexoInit.png" alt="Hexo第一次初始化的博客" title="Philadelphia&#39;s Magic Gardens"></p>
<h2 id="3-将Hexo部署到Github"><a href="#3-将Hexo部署到Github" class="headerlink" title="3. 将Hexo部署到Github"></a>3. 将Hexo部署到Github</h2><h3 id="1-Github创建个人仓库"><a href="#1-Github创建个人仓库" class="headerlink" title="1. Github创建个人仓库"></a>1. Github创建个人仓库</h3><blockquote>
<p>首先，需要有一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<br>举例如下：<br>创建一个和你用户名相同的仓库，后面加.github.io，<br>只有这样，将来要部署到GitHub的时候，才会被识别，也就是xxxx.</p>
</blockquote>
<p><img src="/images/source/resdory.png" alt="Github创建个人仓库" title="Github创建个人仓库"></p>
<h3 id="2-生成ssh添加到Github"><a href="#2-生成ssh添加到Github" class="headerlink" title="2. 生成ssh添加到Github"></a>2. 生成ssh添加到Github</h3><p>打开cmd窗口，执行如下命令</p>
<pre><code>git config --global user.name &quot;yourname&quot;
git config --global user.email &quot;youremail&quot;
</code></pre>
<p>防止输错可以检查：</p>
<pre><code>git config user.name
git config user.email
</code></pre>
<p>接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p>
<p>然后进入github：<br>点击setings</p>
<p>进行以下操作</p>
<p><img src="/images/source/ssh1.png" alt="设置SSH" title="设置SSH"></p>
<p>发现我们需要一个密钥，把我们刚刚复制的密钥粘进去，title随便起</p>
<p><img src="/images/source/ssh2.png" alt="设置SSH" title="设置SSH"></p>
<h3 id="3-进行部署"><a href="#3-进行部署" class="headerlink" title="3. 进行部署"></a>3. 进行部署</h3><p>修改根目录的配置文件_config.yml</p>
<pre><code>deploy:
    type: git
    repo: git@github.com:goubin18/goubin18.github.io.git
    branch: main
</code></pre>
<h3 id="4-安装deploy-git-也就是部署命令，这样你才能用命令部署到GitHub"><a href="#4-安装deploy-git-也就是部署命令，这样你才能用命令部署到GitHub" class="headerlink" title="4. 安装deploy-git,也就是部署命令，这样你才能用命令部署到GitHub"></a>4. 安装deploy-git,也就是部署命令，这样你才能用命令部署到GitHub</h3><pre><code>npm install hexo-deployer-git --save
</code></pre>
<h3 id="5-然后依次执行以下命令："><a href="#5-然后依次执行以下命令：" class="headerlink" title="5. 然后依次执行以下命令："></a>5. 然后依次执行以下命令：</h3><pre><code>hexo c   #清除缓存文件 db.json 和已生成的静态文件 public
hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)
hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)
</code></pre>
<blockquote>
<p>例如：我的用户名是lixiaolong521，那么我的博客地址就是lixiaolong521.github.io</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-fatal-unable-to-access"><a href="#1-fatal-unable-to-access" class="headerlink" title="1. fatal: unable to access"></a>1. fatal: unable to access</h3><p><img src="/images/source/gitError1.png" alt="fatal: unable to access" title="fatal: unable to access"><br>解决方案：把_config.yml中的git仓库链接改成了ssh链接</p>
<h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h3><h5 id="添加Live2d小人（在根目录而不是主题根目录）"><a href="#添加Live2d小人（在根目录而不是主题根目录）" class="headerlink" title="添加Live2d小人（在根目录而不是主题根目录）"></a>添加Live2d小人（在根目录而不是主题根目录）</h5><pre><code>npm install --save hexo-helper-live2d
</code></pre>
<h5 id="添加配置文件（根目录-config-yml）"><a href="#添加配置文件（根目录-config-yml）" class="headerlink" title="添加配置文件（根目录_config.yml）"></a>添加配置文件（根目录_config.yml）</h5><pre><code>live2d:
enable: true  # 是否启动
scriptFrom: local # 默认
pluginRootPath: live2dw/  # 插件在站点上的根目录(相对路径)
pluginJsPath: lib/  # 脚本文件相对与插件根目录路径
pluginModelPath: assets/  # 模型文件相对与插件根目录路径
tagMode: false  # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中
debug: false  # 调试, 是否在控制台输出日志
model:
    use: live2d-widget  ## 模型文件
display:
    position: right # 定位方向 left right top bottom
    width: 150  # 小人宽度
    height: 300 #  小人高度
    hOffset: -15  # 向 偏移
    vOffset: -15  # 像 偏移
mobile:
    show: true  # 手机端是否显示
react:
    opacity: 0.7  # 模型透明度
</code></pre>
<h5 id="选择你喜欢的模型"><a href="#选择你喜欢的模型" class="headerlink" title="选择你喜欢的模型"></a>选择你喜欢的模型</h5><pre><code>live2d-widget-model-chitose
live2d-widget-model-epsilon2_1
live2d-widget-model-gf
live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)
live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)
live2d-widget-model-haruto
live2d-widget-model-hibiki
live2d-widget-model-hijiki
live2d-widget-model-izumi
live2d-widget-model-koharu
live2d-widget-model-miku
live2d-widget-model-ni-j
live2d-widget-model-nico
live2d-widget-model-nietzsche
live2d-widget-model-nipsilon
live2d-widget-model-nito
live2d-widget-model-shizuku
live2d-widget-model-tororo
live2d-widget-model-tsumiki
live2d-widget-model-unitychan
live2d-widget-model-wanko
live2d-widget-model-z16
</code></pre>
<p>然后通过npm install –save live2d-widget-model-xxx来安装你喜欢的模型 比方说作者喜欢的是koharu这个那就使用npm install –save live2d-widget-model-koharu进行安装</p>
<p>安装后把配置里的这条修改成安装的模型名字</p>
<pre><code>model:
use: live2d-widget-model-koharu
</code></pre>
<p>然后使用</p>
<pre><code>hexo clean
hexo g
hexo s
</code></pre>
<p>就可以预览了</p>
]]></content>
      <categories>
        <category>Hexo主题</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>yern</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用函数、方法速查手册</title>
    <url>/2022/11/27/Javascript%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><p>这部分主要对原生JS数组方法进行归纳</p>
<ol>
<li>indexOf()<br>搜索数组中的元素，并返回它所在的位置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li>includes()<br>判断一个数组是否包含一个指定的值。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> site = [<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;google&#x27;</span>, <span class="string">&#x27;taobao&#x27;</span>];</span><br><span class="line">site.<span class="title function_">includes</span>(<span class="string">&#x27;runoob&#x27;</span>); </span><br><span class="line"><span class="comment">// true </span></span><br><span class="line">site.<span class="title function_">includes</span>(<span class="string">&#x27;baidu&#x27;</span>); </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">arr.<span class="title function_">includes</span>(searchElement, fromIndex)</span><br><span class="line"><span class="comment">//searchElement 必须。需要查找的元素值。</span></span><br><span class="line"><span class="comment">//fromIndex 可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</span></span><br><span class="line"><span class="comment">//如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;b&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li>concat()<br>连接两个或更多的数组，并返回结果。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hege = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> stale = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> kai = [<span class="string">&quot;Robin&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> children = hege.<span class="title function_">concat</span>(stale,kai);</span><br><span class="line"><span class="comment">//children 输出结果：</span></span><br><span class="line"><span class="title class_">Cecilie</span>,<span class="title class_">Lone</span>,<span class="title class_">Emil</span>,<span class="title class_">Tobias</span>,<span class="title class_">Linus</span>,<span class="title class_">Robin</span></span><br></pre></td></tr></table></figure></li>
<li>reduce()<br>将数组元素计算为一个值（从左到右）。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">计算数组元素相加后的总和：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">total, num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> total + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = numbers.<span class="title function_">reduce</span>(getSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line"><span class="comment">//reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></span><br><span class="line"><span class="comment">//reduce() 可以作为一个高阶函数，用于函数的 compose。</span></span><br></pre></td></tr></table></figure></li>
<li>some()<br>检测数组元素中是否有元素符合指定条件。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</span></span><br><span class="line"><span class="comment">//some() 方法会依次执行数组的每个元素：</span></span><br><span class="line"><span class="comment">//如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</span></span><br><span class="line"><span class="comment">//如果没有满足条件的元素，则返回false。</span></span><br><span class="line"><span class="comment">//注意： some() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： some() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">some</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>find()<br>返回符合传入测试（函数）条件的数组元素。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</span></span><br><span class="line"><span class="comment">//find() 方法为数组中的每个元素都调用一次函数执行：</span></span><br><span class="line"><span class="comment">//当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</span></span><br><span class="line"><span class="comment">//如果没有符合条件的元素返回 undefined</span></span><br><span class="line"><span class="comment">//注意: find() 对于空数组，函数是不会执行的。</span></span><br><span class="line"><span class="comment">//注意: find() 并没有改变数组的原始值。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">find</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></li>
<li>filter()<br>检测数值元素，并返回符合条件所有元素的数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span></span><br><span class="line"><span class="comment">//注意： filter() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： filter() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">filter</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="number">32</span>,<span class="number">33</span>,<span class="number">40</span></span><br></pre></td></tr></table></figure></li>
<li>every()<br>检测数值元素的每个元素是否都符合条件。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</span></span><br><span class="line"><span class="comment">//every() 方法使用指定函数检测数组中的所有元素：</span></span><br><span class="line"><span class="comment">//如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</span></span><br><span class="line"><span class="comment">//如果所有元素都满足条件，则返回 true。</span></span><br><span class="line"><span class="comment">//注意： every() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： every() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">every</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Javascript</tag>
        <tag>Javascript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目启动报错：Syntax Error: Error: Node Sass version 7.0.3 is incompatible with ^4.0.0.</title>
    <url>/2022/11/27/vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%9ASyntax-Error-Error-Node-Sass-version-7-0-3-is-incompatible-with-4-0-0/</url>
    <content><![CDATA[<p>第一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall node-sass</span><br></pre></td></tr></table></figure>
<p><img src="/images/source/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.png" alt="vue启动报错" title="vue启动报错"></p>
<p>第二步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D sass</span><br></pre></td></tr></table></figure>
<p><img src="/images/source/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E4%BA%8C.png" alt="vue启动成功" title="vue启动成功"></p>
]]></content>
      <categories>
        <category>vue项目启动报错</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue启动报错</tag>
      </tags>
  </entry>
  <entry>
    <title>安装依赖时报错：npm ERR! code ERESOLVE npm ERR! ERESOLVE could not resolve npm ERR! npm ERR! While resolving</title>
    <url>/2022/11/27/%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9Anpm-ERR-code-ERESOLVE-npm-ERR-ERESOLVE-could-not-resolve-npm-ERR-npm-ERR-While-resolving/</url>
    <content><![CDATA[<p><strong>错误原因</strong>：可能是npm版本问题报错</p>
<p><strong>解决方法</strong>：在完整的指令后面添加–legacy-peer-deps</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--legacy-peer-deps**</span><br></pre></td></tr></table></figure>

<p>即以下这种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios -S --legacy-peer-deps</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装依赖时报错</category>
      </categories>
      <tags>
        <tag>安装依赖时报错</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON的parse与stringify区别</title>
    <url>/2022/11/27/JSON%E7%9A%84parse%E4%B8%8Estringify%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="一、JSON-parse-与JSON-stringify-的区别"><a href="#一、JSON-parse-与JSON-stringify-的区别" class="headerlink" title="一、JSON.parse()与JSON.stringify()的区别"></a>一、JSON.parse()与JSON.stringify()的区别</h4><blockquote>
<p>JSON.parse()将JSON字符串转为一个对象，而JSON.stringify()是将 JavaScript 对象转换为 JSON 字符串.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&#x27;&#123; &quot;sites&quot; : [&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">//obj = JSON.parse(text);</span></span><br><span class="line">&#123;<span class="attr">sites</span>: <span class="title class_">Array</span>(<span class="number">3</span>)&#125;<span class="attr">sites</span>: <span class="title class_">Array</span>(<span class="number">3</span>)<span class="number">0</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;<span class="number">1</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Google&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.google.com&#x27;</span>&#125;<span class="number">2</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Taobao&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.taobao.com&#x27;</span>&#125;<span class="attr">length</span>: <span class="number">3</span>[[<span class="title class_">Prototype</span>]]: <span class="title class_">Array</span>(<span class="number">0</span>)[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span></span><br><span class="line"><span class="comment">//str = JSON.stringify(obj)</span></span><br><span class="line">&#123;<span class="string">&quot;sites&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Google&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Taobao&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.taobao.com&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>注：使用JSON.parse()时，字符串必须符合JSON格式，即键值都必须使用双引号包裹：</strong></em>❤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(a));   <span class="comment">// Array [1,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(b));  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h4 id="两者的用法"><a href="#两者的用法" class="headerlink" title="两者的用法"></a>两者的用法</h4><h6 id="让localStorage-x2F-sessionStorage可以存储对象"><a href="#让localStorage-x2F-sessionStorage可以存储对象" class="headerlink" title="让localStorage&#x2F;sessionStorage可以存储对象"></a>让localStorage&#x2F;sessionStorage可以存储对象</h6><p>在开发过程中，我们存储的数据大部分为对象类型，但是localStorage&#x2F;sessionStorage只能存储为字符串类型，所以，我们在使用的时候就可以配合JSON.parse()与JSON.stringify()来存取数据</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>JSON.stringify()与toString()的区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr);    <span class="comment">// &#x27;[1,2,3]&#x27;</span></span><br><span class="line">arr.<span class="title function_">toString</span>();    <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>
<p>两者都是可以把数组转为字符串，但是，JSON.stringify() 面向的更多是对象，toString() 并不能对 { name : ‘lxy’ } 这类对象实现你想要的操作，面向的更多是数字。</p>
]]></content>
      <categories>
        <category>JSON的parse与stringify</category>
      </categories>
      <tags>
        <tag>JSON的parse与stringify</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由传参三种方式</title>
    <url>/2022/11/27/Vue%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>params传参</li>
<li>路由属性配置传参</li>
<li>query传参</li>
</ul>
<h4 id="一、params传参"><a href="#一、params传参" class="headerlink" title="一、params传参"></a>一、params传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; </span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;admin&quot;</span>,　　　　</span><br><span class="line">	<span class="comment">//这里的params是一个对象，id是属性名，item.id是值(可以从当前组件或者Vue实例上直接取) </span></span><br><span class="line">	<span class="attr">params</span>:&#123;<span class="attr">id</span>:item.<span class="property">id</span>&#125; </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123;　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>,　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过params传递参数，如果我们想获取 id 的参数值，可以通过this.$route.params.id这种方式来打印出来就可以得到了；</p>
<p><em><strong>注意：获取参数的时候是 $route，跳转和传参的时候是 $router</strong></em></p>
<h4 id="二、路由属性配置传参："><a href="#二、路由属性配置传参：" class="headerlink" title="二、路由属性配置传参："></a>二、路由属性配置传参：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;/admin/$&#123;item.id&#125;&quot;</span>, </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123; 　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin:id&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过路由属性配置传参我们可以用this.$route.params.id来获取到 id 的值，</p>
<p>注意 this. $router.push 方法里面路径带的是值，路由配置项那里带的是变量名(属性名)来实现的对应；</p>
<p>以上两种传参方式基本上可以理解为 ajax 中的 post 请求方式，<em><strong>参数都是不可见</strong></em>的，但是上面两种方法都有一个弊端，就是当<em><strong>页面刷新了是获取不到参数值的</strong></em>，那么有没有一种方法是页面刷新之后参数依然存在呢？</p>
<h4 id="三、query传参"><a href="#三、query传参" class="headerlink" title="三、query传参"></a>三、query传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; </span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;/admin&quot;</span>,　　　　 </span><br><span class="line">	<span class="attr">query</span>:&#123;id：item.<span class="property">id</span>&#125; </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123; 　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种方式是用 query 来传参，这种方式是可以解决页面刷新参数消失问题的，这种方式可以理解为是 ajax 中的 get 方法，参数是直接在 url 后面添加的，参数是可见的，所以解决页面刷新参数消失问题建议使用此方法来解决；</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>（1）params传参</p>
<p>只能用 name，不能用 path。</p>
<p>地址栏不显示参数名称 id，但是有参数的值。</p>
<p>（2）query传参</p>
<p>name 和 path 都能用。用 path 的时候，提供的 path 值必须是相对于根路径的相对路径，而不是相对于父路由的相对路径，否则无法成功访问。</p>
<blockquote>
<p>地址栏显示参数格式为?id&#x3D;0&amp;code&#x3D;1</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue传参</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue路由</tag>
        <tag>Vue路由传参</tag>
      </tags>
  </entry>
  <entry>
    <title>JS时间戳和时间之间转换</title>
    <url>/2022/11/27/JS%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E6%97%B6%E9%97%B4%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>一、时间转换时间戳</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//时间对象</span></span><br><span class="line"><span class="keyword">var</span> str = date.<span class="title function_">getTime</span>(); <span class="comment">//转换成时间戳</span></span><br></pre></td></tr></table></figure>
<p>二、时间戳转换为时间</p>
<ol>
<li>转换成形如 2018年1月4日 14:00:00 格式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params">date</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">toLocaleString</span>(); </span><br><span class="line">    <span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>也可以这样<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也很简单</span></span><br><span class="line"><span class="keyword">var</span> strtime = <span class="string">&#x27;2014-04-23 18:55:49:123&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(strtime.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 有三种方式获取，在后面会讲到三种方式的区别</span></span><br><span class="line">time1 = date.<span class="title function_">getTime</span>();</span><br><span class="line">time2 = date.<span class="title function_">valueOf</span>();</span><br><span class="line">time3 = <span class="title class_">Date</span>.<span class="title function_">parse</span>(date);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">三种获取的区别：</span></span><br><span class="line"><span class="comment">第一、第二种：会精确到毫秒</span></span><br><span class="line"><span class="comment">第三种：只能精确到秒，毫秒将用0来代替</span></span><br><span class="line"><span class="comment">比如上面代码输出的结果(一眼就能看出区别)：</span></span><br><span class="line"><span class="comment">1398250549123</span></span><br><span class="line"><span class="comment">1398250549123</span></span><br><span class="line"><span class="comment">1398250549000 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
<li>转换成更多其他的格式：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的一句代码</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(时间戳); <span class="comment">//获取一个时间对象</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1. 下面是获取时间日期的方法，需要什么样的格式自己拼接起来就好了</span></span><br><span class="line"><span class="comment"> 2. 更多好用的方法可以在这查到 -&gt; http://www.w3school.com.cn/jsref/jsref_obj_date.asp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">date.<span class="title function_">getFullYear</span>();  <span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">date.<span class="title function_">getMonth</span>();  <span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">date.<span class="title function_">getDate</span>();  <span class="comment">// 获取日(1-31)</span></span><br><span class="line">date.<span class="title function_">getTime</span>();  <span class="comment">// 获取时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">date.<span class="title function_">getHours</span>();  <span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">date.<span class="title function_">getMinutes</span>();  <span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">date.<span class="title function_">getSeconds</span>();  <span class="comment">// 获取秒数(0-59)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="comment">// 比如需要这样的格式 yyyy-MM-dd hh:mm:ss</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1398250549490</span>);</span><br><span class="line">Y = date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">M = (date.<span class="title function_">getMonth</span>()+<span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span>+(date.<span class="title function_">getMonth</span>()+<span class="number">1</span>) : date.<span class="title function_">getMonth</span>()+<span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">D = date.<span class="title function_">getDate</span>() + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">h = date.<span class="title function_">getHours</span>() + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">m = date.<span class="title function_">getMinutes</span>() + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">s = date.<span class="title function_">getSeconds</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(Y+M+D+h+m+s); </span><br><span class="line"><span class="comment">// 输出结果：2014-04-23 18:55:49</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS时间戳和时间之间转换</category>
      </categories>
  </entry>
  <entry>
    <title>Electron热加载</title>
    <url>/2022/11/27/Electron%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="安装Electron热加载插件"><a href="#安装Electron热加载插件" class="headerlink" title="安装Electron热加载插件"></a>安装Electron热加载插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在项目的根目录下安装 electron-reloader，国内建议使用 cnpm 代替 npm</span><br><span class="line">npm install electron-reloader --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="导入热加载插件"><a href="#导入热加载插件" class="headerlink" title="导入热加载插件"></a>导入热加载插件</h4><p>打开项目下的 package.json 文件，找到里面配置的入口文件。<br>如图我这里配置的是 main.js 文件：</p>
<p><img src="/images/source/electron%E7%83%AD%E5%8A%A0%E8%BD%BD.png" alt="electron热加载" title="electron热加载"></p>
<p>打开入口文件，导入热加载插件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在入口文件对的顶部配置热加载</span></span><br><span class="line"><span class="comment">// 热加载</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">&#x27;electron-reloader&#x27;</span>)(<span class="variable language_">module</span>, &#123;&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (_) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>然后保存并重新手动运行项目，热加载就能生效了。修改了代码后直接保存就能触发热加载自动更新运行项目，再也不需要反复手动运行项目了。</p>
]]></content>
      <categories>
        <category>Electron</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>博客内容格式配置与说明</title>
    <url>/2022/11/27/README/</url>
    <content><![CDATA[<blockquote>
<p>编写博客标题说明</p>
</blockquote>
<h2 id="我的博客，这是一个说明文件"><a href="#我的博客，这是一个说明文件" class="headerlink" title="我的博客，这是一个说明文件"></a>我的博客，这是一个说明文件</h2><h1 id="标题一-1"><a href="#标题一-1" class="headerlink" title="标题一|1 #"></a>标题一|1 #</h1><h2 id="标题二-2"><a href="#标题二-2" class="headerlink" title="标题二|2 ##"></a>标题二|2 ##</h2><h3 id="标题三-3"><a href="#标题三-3" class="headerlink" title="标题三|3 ###"></a>标题三|3 ###</h3><h4 id="标题四-4"><a href="#标题四-4" class="headerlink" title="标题四|4 ####"></a>标题四|4 ####</h4><h5 id="标题五-5"><a href="#标题五-5" class="headerlink" title="标题五|5 #####"></a>标题五|5 #####</h5><h6 id="标题-6"><a href="#标题-6" class="headerlink" title="标题|6 ######"></a>标题|6 ######</h6><blockquote>
<p>`&#96;&#96;开头`&#96;&#96;结尾是【代码块】，会出现copy字样</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hexo及主题的相关配置 #标题</span><br><span class="line">date: 2022-11-22 14:50:40 #创建日期</span><br><span class="line">categories: Hexo主题  #分类</span><br><span class="line">tags: [Hexo,yern,博客]  #标签</span><br><span class="line">top: true  #是否置顶 也可用序号代替</span><br><span class="line">archives: Hexo及主题的相关配置 #归档</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>博客</tag>
        <tag>Readme</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 在系统上禁止运行脚本</title>
    <url>/2022/11/22/vue-%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<ol>
<li>首先需要在编译器终端中执行命令：<strong>get-ExecutionPolicy</strong>，<br>终端返回 ：<strong>Restricted</strong>   &#x2F;&#x2F;表示脚本被禁止，无法使用</li>
<li>在命令行打入命令  <strong>set-ExecutionPolicy RemoteSigned：</strong>&#x2F;&#x2F;设置执行策略为RemoteSigned。<br><strong>如果显示没有权限修改 注意用管理员身份运行编辑器（vscode或hbuilder等）</strong></li>
<li>然后我们再执行 <strong>get-ExecutionPolicy</strong><br>显示<strong>RemoteSigned</strong>，即表示可以正常执行脚本命令了。</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman汉化</title>
    <url>/2022/11/22/Postman%E6%B1%89%E5%8C%96/</url>
    <content><![CDATA[<p>（Postman默认安装路径为:C:\Users\Admin\AppData\Local\Postman）</p>
<span id="more"></span>
<ol>
<li>下载Postman对应版本汉化包，汉化包github下载地址:<a href="https://github.com/hlmd/Postman-cn/releases">https://github.com/hlmd/Postman-cn/releases</a></li>
<li>放置到postman安装路径下Postman\app-xxxx\resources，再次重新启动Postman即可完成汉化。</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>汉化</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>关于电脑显示“没有被指定在windows上运行，或者它包含错误”怎么解决？</title>
    <url>/2022/11/21/%E5%85%B3%E4%BA%8E%E7%94%B5%E8%84%91%E6%98%BE%E7%A4%BA%E2%80%9C%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8C%87%E5%AE%9A%E5%9C%A8windows%E4%B8%8A%E8%BF%90%E8%A1%8C%EF%BC%8C%E6%88%96%E8%80%85%E5%AE%83%E5%8C%85%E5%90%AB%E9%94%99%E8%AF%AF%E2%80%9D%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li><p>首先需要找到并右击名称为“菜单”按钮，接着需要在接下来弹出来的下拉菜单中的下方，找到并点击名称为”运行“按钮：</p>
</li>
<li><p>接着需要在接下来弹出来的页面框中输入“CMD”命令符，点击“确定”按钮：</p>
<span id="more"></span>
</li>
<li><p>接着只需要输入“for %1 in (%windir%\system32\*.dll) do regsvr32.exe &#x2F;s %1”命令按下回车键：</p>
</li>
<li><p>最后重启电脑桌面上就不会显示“没有被指定在windows上运行，或者它包含错误”即可解决问题了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>windows系统</tag>
        <tag>方法</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo及主题的相关配置</title>
    <url>/2022/11/22/Hexo%E5%8F%8A%E4%B8%BB%E9%A2%98%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>介绍如何安装Hexo及下载主题和配置主题，并且上传到Github成功访问</p>
<span id="more"></span>
<h2 id="1-下载Hexo"><a href="#1-下载Hexo" class="headerlink" title="1. 下载Hexo"></a>1. 下载Hexo</h2><p>打开cmd窗口  </p>
<pre><code>npm install -g hexo
</code></pre>
<br/>

<h2 id="2-文件初始化"><a href="#2-文件初始化" class="headerlink" title="2. 文件初始化"></a>2. 文件初始化</h2><p>进入你要创建博客的文件夹中</p>
<pre><code>hexo init #初始化项目
hexo clean #清除缓存
hexo g #生成静态文件
hexo s #启动端口并预览 http://localhost:4000/
</code></pre>


<p><img src="/images/source/hexoInit.png" alt="Hexo第一次初始化的博客" title="Philadelphia&#39;s Magic Gardens"></p>
<h2 id="3-将Hexo部署到Github"><a href="#3-将Hexo部署到Github" class="headerlink" title="3. 将Hexo部署到Github"></a>3. 将Hexo部署到Github</h2><h3 id="1-Github创建个人仓库"><a href="#1-Github创建个人仓库" class="headerlink" title="1. Github创建个人仓库"></a>1. Github创建个人仓库</h3><blockquote>
<p>首先，需要有一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<br>举例如下：<br>创建一个和你用户名相同的仓库，后面加.github.io，<br>只有这样，将来要部署到GitHub的时候，才会被识别，也就是xxxx.</p>
</blockquote>
<p><img src="/images/source/resdory.png" alt="Github创建个人仓库" title="Github创建个人仓库"></p>
<h3 id="2-生成ssh添加到Github"><a href="#2-生成ssh添加到Github" class="headerlink" title="2. 生成ssh添加到Github"></a>2. 生成ssh添加到Github</h3><p>打开cmd窗口，执行如下命令</p>
<pre><code>git config --global user.name &quot;yourname&quot;
git config --global user.email &quot;youremail&quot;
</code></pre>
<p>防止输错可以检查：</p>
<pre><code>git config user.name
git config user.email
</code></pre>
<p>接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p>
<p>然后进入github：<br>点击setings</p>
<p>进行以下操作</p>
<p><img src="/images/source/ssh1.png" alt="设置SSH" title="设置SSH"></p>
<p>发现我们需要一个密钥，把我们刚刚复制的密钥粘进去，title随便起</p>
<p><img src="/images/source/ssh2.png" alt="设置SSH" title="设置SSH"></p>
<h3 id="3-进行部署"><a href="#3-进行部署" class="headerlink" title="3. 进行部署"></a>3. 进行部署</h3><p>修改根目录的配置文件_config.yml</p>
<pre><code>deploy:
    type: git
    repo: git@github.com:goubin18/goubin18.github.io.git
    branch: main
</code></pre>
<h3 id="4-安装deploy-git-也就是部署命令，这样你才能用命令部署到GitHub"><a href="#4-安装deploy-git-也就是部署命令，这样你才能用命令部署到GitHub" class="headerlink" title="4. 安装deploy-git,也就是部署命令，这样你才能用命令部署到GitHub"></a>4. 安装deploy-git,也就是部署命令，这样你才能用命令部署到GitHub</h3><pre><code>npm install hexo-deployer-git --save
</code></pre>
<h3 id="5-然后依次执行以下命令："><a href="#5-然后依次执行以下命令：" class="headerlink" title="5. 然后依次执行以下命令："></a>5. 然后依次执行以下命令：</h3><pre><code>hexo c   #清除缓存文件 db.json 和已生成的静态文件 public
hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)
hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)
</code></pre>
<blockquote>
<p>例如：我的用户名是lixiaolong521，那么我的博客地址就是lixiaolong521.github.io</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-fatal-unable-to-access"><a href="#1-fatal-unable-to-access" class="headerlink" title="1. fatal: unable to access"></a>1. fatal: unable to access</h3><p><img src="/images/source/gitError1.png" alt="fatal: unable to access" title="fatal: unable to access"><br>解决方案：把_config.yml中的git仓库链接改成了ssh链接</p>
<h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h3><h5 id="添加Live2d小人（在根目录而不是主题根目录）"><a href="#添加Live2d小人（在根目录而不是主题根目录）" class="headerlink" title="添加Live2d小人（在根目录而不是主题根目录）"></a>添加Live2d小人（在根目录而不是主题根目录）</h5><pre><code>npm install --save hexo-helper-live2d
</code></pre>
<h5 id="添加配置文件（根目录-config-yml）"><a href="#添加配置文件（根目录-config-yml）" class="headerlink" title="添加配置文件（根目录_config.yml）"></a>添加配置文件（根目录_config.yml）</h5><pre><code>live2d:
enable: true  # 是否启动
scriptFrom: local # 默认
pluginRootPath: live2dw/  # 插件在站点上的根目录(相对路径)
pluginJsPath: lib/  # 脚本文件相对与插件根目录路径
pluginModelPath: assets/  # 模型文件相对与插件根目录路径
tagMode: false  # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中
debug: false  # 调试, 是否在控制台输出日志
model:
    use: live2d-widget  ## 模型文件
display:
    position: right # 定位方向 left right top bottom
    width: 150  # 小人宽度
    height: 300 #  小人高度
    hOffset: -15  # 向 偏移
    vOffset: -15  # 像 偏移
mobile:
    show: true  # 手机端是否显示
react:
    opacity: 0.7  # 模型透明度
</code></pre>
<h5 id="选择你喜欢的模型"><a href="#选择你喜欢的模型" class="headerlink" title="选择你喜欢的模型"></a>选择你喜欢的模型</h5><pre><code>live2d-widget-model-chitose
live2d-widget-model-epsilon2_1
live2d-widget-model-gf
live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)
live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)
live2d-widget-model-haruto
live2d-widget-model-hibiki
live2d-widget-model-hijiki
live2d-widget-model-izumi
live2d-widget-model-koharu
live2d-widget-model-miku
live2d-widget-model-ni-j
live2d-widget-model-nico
live2d-widget-model-nietzsche
live2d-widget-model-nipsilon
live2d-widget-model-nito
live2d-widget-model-shizuku
live2d-widget-model-tororo
live2d-widget-model-tsumiki
live2d-widget-model-unitychan
live2d-widget-model-wanko
live2d-widget-model-z16
</code></pre>
<p>然后通过npm install –save live2d-widget-model-xxx来安装你喜欢的模型 比方说作者喜欢的是koharu这个那就使用npm install –save live2d-widget-model-koharu进行安装</p>
<p>安装后把配置里的这条修改成安装的模型名字</p>
<pre><code>model:
use: live2d-widget-model-koharu
</code></pre>
<p>然后使用</p>
<pre><code>hexo clean
hexo g
hexo s
</code></pre>
<p>就可以预览了</p>
]]></content>
      <categories>
        <category>Hexo主题</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>yern</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript2022.12.0笔记</title>
    <url>/2022/12/04/javascript2022-12-05%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><h5 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h5><p>Object本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>
<p>如果参数为空（或者为undefined和null），Object()返回一个空对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>上面代码的含义，是将undefined和null转为对象，结果得到了一个空对象obj。</p>
<p>如果参数是原始类型的值，Object方法将其转为对应的包装对象的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(<span class="number">1</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Number</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(<span class="literal">true</span>);</span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Boolean</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，<strong>Object函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。</strong></p>
<p>如果<strong>Object方法的参数是一个对象，它总是返回该对象</strong>，即不用转换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(arr); <span class="comment">// 返回原数组</span></span><br><span class="line">obj === arr <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(value) <span class="comment">// 返回原对象</span></span><br><span class="line">obj === value <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>(fn); <span class="comment">// 返回原函数</span></span><br><span class="line">obj === fn <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javascript笔记</category>
      </categories>
      <tags>
        <tag>javascript笔记</tag>
        <tag>标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript2022.12.04笔记3</title>
    <url>/2022/12/04/javascript2022-12-04%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h3 id="语法专题"><a href="#语法专题" class="headerlink" title="语法专题"></a>语法专题</h3><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>强制转换主要指使用Number()、String()和Boolean()三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。</p>
<h6 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h6><h6 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h6><p>Boolean()函数可以将任意类型的值转为布尔值。</p>
<p>所有对象（包括空对象）的转换结果都是true，甚至连false对应的布尔对象new Boolean(false)也是true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h4><h5 id="原生错误类型"><a href="#原生错误类型" class="headerlink" title="原生错误类型"></a>原生错误类型</h5><h6 id="SyntaxError-对象"><a href="#SyntaxError-对象" class="headerlink" title="SyntaxError 对象"></a>SyntaxError 对象</h6><p>SyntaxError对象是解析代码时发生的语法错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量名错误</span></span><br><span class="line"><span class="keyword">var</span> 1a;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺少括号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected string</span></span><br></pre></td></tr></table></figure>
<h6 id="ReferenceError-对象"><a href="#ReferenceError-对象" class="headerlink" title="ReferenceError 对象"></a>ReferenceError 对象</h6><p>ReferenceError对象是引用一个不存在的变量时发生的错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用一个不存在的变量</span></span><br><span class="line">unknownVariable</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: unknownVariable is not defined</span></span><br></pre></td></tr></table></figure>
<p>另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等号左侧不是变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>() = <span class="number">1</span></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure>
<h6 id="RangeError-对象"><a href="#RangeError-对象" class="headerlink" title="RangeError 对象"></a>RangeError 对象</h6><p>RangeError对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是Number对象的方法参数超出范围，以及函数堆栈超过最大值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组长度不得为负数</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// Uncaught RangeError: Invalid array length</span></span><br></pre></td></tr></table></figure>
<h6 id="TypeError-对象"><a href="#TypeError-对象" class="headerlink" title="TypeError 对象"></a>TypeError 对象</h6><p>TypeError对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用new命令，就会抛出这种错误，因为new命令的参数应该是一个构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="number">123</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: 123 is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="title function_">unknownMethod</span>()</span><br><span class="line"><span class="comment">// Uncaught TypeError: obj.unknownMethod is not a function</span></span><br></pre></td></tr></table></figure>
<h6 id="URIError-对象"><a href="#URIError-对象" class="headerlink" title="URIError 对象"></a>URIError 对象</h6><p>URIError对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;%2&#x27;</span>)</span><br><span class="line"><span class="comment">// URIError: URI malformed</span></span><br></pre></td></tr></table></figure>
<h6 id="EvalError-对象"><a href="#EvalError-对象" class="headerlink" title="EvalError 对象"></a>EvalError 对象</h6><p>eval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p>
<h5 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h5> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserError</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message || <span class="string">&#x27;默认信息&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;UserError&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">UserError</span>;</span><br></pre></td></tr></table></figure>
<p>上面代码自定义一个错误对象UserError，让它继承Error对象。然后，就可以生成这种自定义类型的错误了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">UserError</span>(<span class="string">&#x27;这是自定义的错误！&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h5><p>throw语句的作用是手动中断程序执行，抛出一个错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;x 必须为正数&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught Error: x 必须为正数</span></span><br></pre></td></tr></table></figure>
<p>throw抛出的错误就是它的参数，这里是一个Error对象的实例。</p>
<p>throw也可以抛出自定义错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserError</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message || <span class="string">&#x27;默认信息&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;UserError&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserError</span>(<span class="string">&#x27;出错了！&#x27;</span>);</span><br><span class="line"><span class="comment">// Uncaught UserError &#123;message: &quot;出错了！&quot;, name: &quot;UserError&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="finally-代码块"><a href="#finally-代码块" class="headerlink" title="finally 代码块"></a>finally 代码块</h5><p>try…catch结构允许在最后添加一个finally代码块，表示不管是否出现错误，都必需在最后运行的语句。</p>
<p>return语句的执行是排在finally代码之前</p>
<p>try代码块内部，还可以再使用try代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    consle.<span class="title function_">log</span>(<span class="string">&#x27;Hello world!&#x27;</span>); <span class="comment">// 报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Finally&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Will I run?&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Finally</span></span><br><span class="line"><span class="comment">// consle is not defined</span></span><br></pre></td></tr></table></figure>

<p>try里面还有一个try。内层的try报错（console拼错了），这时会执行内层的finally代码块，然后抛出错误，被外层的catch捕获。</p>
<h4 id="console-对象与控制台"><a href="#console-对象与控制台" class="headerlink" title="console 对象与控制台"></a>console 对象与控制台</h4><h5 id="console-对象"><a href="#console-对象" class="headerlink" title="console 对象"></a>console 对象</h5><p>打开开发者工具以后，顶端有多个面板。</p>
<ul>
<li>Elements：查看网页的 HTML 源码和 CSS 代码。</li>
<li>Resources：查看网页加载的各种资源文件（比如代码文件、字体文件 CSS 文件等），以及在硬盘上创建的各种内容（比如本地缓存、Cookie、Local Storage等）。</li>
<li>Network：查看网页的 HTTP 通信情况。</li>
<li>Sources：查看网页加载的脚本源码。</li>
<li>Timeline：查看各种网页行为随时间变化的情况。</li>
<li>Performance：查看网页的性能情况，比如 CPU 和内存消耗。</li>
<li>Console：用来运行 JavaScript 命令。</li>
</ul>
<h6 id="console-warn-，console-error"><a href="#console-warn-，console-error" class="headerlink" title="console.warn()，console.error()"></a>console.warn()，console.error()</h6><p>warn方法和error方法也是在控制台输出信息,warn方法输出信息时，在最前面加一个黄色三角，表示警告；error方法输出信息时，在最前面加一个红色的叉，表示出错。</p>
<h6 id="console-table"><a href="#console-table" class="headerlink" title="console.table()"></a>console.table()</h6><p>对于某些复合类型的数据，console.table方法可以将其转为表格显示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> languages = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;JavaScript&quot;</span>, <span class="attr">fileExtension</span>: <span class="string">&quot;.js&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;TypeScript&quot;</span>, <span class="attr">fileExtension</span>: <span class="string">&quot;.ts&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;CoffeeScript&quot;</span>, <span class="attr">fileExtension</span>: <span class="string">&quot;.coffee&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(languages);</span><br></pre></td></tr></table></figure>
<h6 id="console-count"><a href="#console-count" class="headerlink" title="console.count()"></a>console.count()</h6><p>count方法用于计数，输出它被调用了多少次。</p>
<p>该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">count</span>(user);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="comment">// bob: 1</span></span><br><span class="line"><span class="comment">// &quot;hi bob&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;alice&#x27;</span>)</span><br><span class="line"><span class="comment">// alice: 1</span></span><br><span class="line"><span class="comment">// &quot;hi alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="comment">// bob: 2</span></span><br><span class="line"><span class="comment">// &quot;hi bob&quot;</span></span><br></pre></td></tr></table></figure>
<h6 id="console-dir-，console-dirxml"><a href="#console-dir-，console-dirxml" class="headerlink" title="console.dir()，console.dirxml()"></a>console.dir()，console.dirxml()</h6><p>dir方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(&#123;<span class="attr">f1</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">f2</span>: <span class="string">&#x27;bar&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="comment">//   f1: &quot;foo&quot;</span></span><br><span class="line"><span class="comment">//   f2: &quot;bar&quot;</span></span><br><span class="line"><span class="comment">//   __proto__: Object</span></span><br></pre></td></tr></table></figure>
<p>dirxml方法主要用于以目录树的形式，显示 DOM 节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dirxml</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果参数不是 DOM 节点，而是普通的 JavaScript 对象，console.dirxml等同于console.dir。</p>
</blockquote>
]]></content>
      <categories>
        <category>javascript笔记</category>
      </categories>
      <tags>
        <tag>javascript笔记</tag>
        <tag>语法专题</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript2022.12.4笔记2</title>
    <url>/2022/12/04/javascript2022-12-4%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符"></a>加法运算符</h5><h6 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h6><p>运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。由于加法运算符存在重载，可能执行两种运算，使用的时候必须很小心。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;3&#x27;</span> + <span class="number">4</span> + <span class="number">5</span> <span class="comment">// &quot;345&quot;</span></span><br><span class="line"><span class="number">3</span> + <span class="number">4</span> + <span class="string">&#x27;5&#x27;</span> <span class="comment">// &quot;75&quot;</span></span><br><span class="line"><span class="number">1</span>+<span class="literal">undefined</span> <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
<h6 id="对象的相加"><a href="#对象的相加" class="headerlink" title="对象的相加"></a>对象的相加</h6><p>对象的valueOf方法总是返回对象自身，这时再自动调用对象的toString方法，将其转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="title function_">valueOf</span>().<span class="title function_">toString</span>() <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>对象转成原始类型的值,自动调用对象的valueOf方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="title function_">valueOf</span>() <span class="comment">// &#123; p: 1 &#125;</span></span><br></pre></td></tr></table></figure></li>
<li>对象的valueOf方法总是返回对象自身，这时再自动调用对象的toString方法，将其转为字符串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="title function_">valueOf</span>().<span class="title function_">toString</span>() <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>
对象的toString方法默认返回[object Object]，所以就得到了最前面那个例子的结果。</li>
</ol>
<p>知道了这个规则以后，就可以自己定义valueOf方法或toString方法，得到想要的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//valueOf</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj + <span class="number">2</span> <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//toString</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">toString</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj + <span class="number">2</span> <span class="comment">// &quot;hello2&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="余数运算符"><a href="#余数运算符" class="headerlink" title="余数运算符"></a>余数运算符</h5><p><strong>注意：运算结果的正负号由第一个运算子的正负号决定。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-<span class="number">1</span> % <span class="number">2</span> <span class="comment">// -1</span></span><br><span class="line"><span class="number">1</span> % -<span class="number">2</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>为了得到负数的正确余数值，可以先使用绝对值函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isOdd</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">isOdd</span>(-<span class="number">5</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title function_">isOdd</span>(-<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isOdd</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(n % <span class="number">2</span>) === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">isOdd</span>(-<span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isOdd</span>(-<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h5 id="数值运算符，负数值运算符"><a href="#数值运算符，负数值运算符" class="headerlink" title="数值运算符，负数值运算符"></a>数值运算符，负数值运算符</h5><p>数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="literal">true</span> <span class="comment">// 1</span></span><br><span class="line">+[] <span class="comment">// 0</span></span><br><span class="line">+&#123;&#125; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。</p>
<h5 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于 2 ** (3 ** 2)</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="comment">// 512</span></span><br></pre></td></tr></table></figure>
<h5 id="非相等运算符：非字符串的比较"><a href="#非相等运算符：非字符串的比较" class="headerlink" title="非相等运算符：非字符串的比较"></a>非相等运算符：非字符串的比较</h5><p>任何值（包括NaN本身）与NaN使用非相等运算符进行比较，返回的都是false。</p>
<h6 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h6><p>undefined和null与自身严格相等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>由于变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v1;</span><br><span class="line"><span class="keyword">var</span> v2;</span><br><span class="line">v1 === v2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h5 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h5><p>undefined和null只有与自身比较，或者互相比较时，才会返回true；与其他类型的值比较时，结果都为false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h5 id="取反运算符"><a href="#取反运算符" class="headerlink" title="取反运算符"></a>取反运算符</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line">!<span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line">!<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">!<span class="title class_">NaN</span> <span class="comment">// true</span></span><br><span class="line">!<span class="string">&quot;&quot;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">!<span class="number">54</span> <span class="comment">// false</span></span><br><span class="line">!<span class="string">&#x27;hello&#x27;</span> <span class="comment">// false</span></span><br><span class="line">![] <span class="comment">// false</span></span><br><span class="line">!&#123;&#125; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与Boolean函数的作用相同。这是一种常用的类型转换的写法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!!x</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title class_">Boolean</span>(x)</span><br></pre></td></tr></table></figure>
<h5 id="且运算符"><a href="#且运算符" class="headerlink" title="且运算符"></a>且运算符</h5><p>如果第一个运算子的布尔值为true，则返回第二个运算子的值（注意是<strong>值</strong>，不是布尔值）；如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值。</p>
<h5 id="或运算符（-）"><a href="#或运算符（-）" class="headerlink" title="或运算符（||）"></a>或运算符（||）</h5><p>如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;t&#x27;</span> || <span class="string">&#x27;&#x27;</span> <span class="comment">// &quot;t&quot;</span></span><br><span class="line"><span class="string">&#x27;t&#x27;</span> || <span class="string">&#x27;f&#x27;</span> <span class="comment">// &quot;t&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;f&#x27;</span> <span class="comment">// &quot;f&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;&#x27;</span> <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void 运算符"></a>void 运算符</h5><p>void运算符的作用是执行一个表达式，然后不返回任何值，或者说返回undefined。</p>
<blockquote>
<p>这个运算符的主要用途是浏览器的书签工具（Bookmarklet），以及在超级链接中插入代码防止网页跳转。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;f(); return false;&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（&lt;&#x3D;)、严格相等（&#x3D;&#x3D;&#x3D;）、或（||）、三元（?:）、等号（&#x3D;）。因此上面的表达式，实际的运算顺序如下。</strong><br>圆括号只改变优先级，不会求值。<br>圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">var</span> a = <span class="number">1</span>)</span><br><span class="line"><span class="comment">// SyntaxError: Unexpected token var</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript笔记</category>
      </categories>
      <tags>
        <tag>javascript笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript2022.12.04笔记</title>
    <url>/2022/12/04/javascript2022-12-04%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="Base64-转码"><a href="#Base64-转码" class="headerlink" title="Base64 转码"></a>Base64 转码</h5><ul>
<li>ASCII 码0到31的符号都无法打印出来，这时可以使用 Base64 编码</li>
<li>需要以文本格式传递二进制数据，那么也可以使用 Base64 编码。</li>
</ul>
<p>JavaScript 原生提供两个 Base64 相关的方法。</p>
<ul>
<li>btoa()：任意值转为 Base64 编码</li>
<li>atob()：Base64 编码转为原来的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="title function_">btoa</span>(string) <span class="comment">// &quot;SGVsbG8gV29ybGQh&quot;</span></span><br><span class="line"><span class="title function_">atob</span>(<span class="string">&#x27;SGVsbG8gV29ybGQh&#x27;</span>) <span class="comment">// &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>

<p>这两个方法不适合非 ASCII 码的字符，会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">btoa</span>(<span class="string">&#x27;你好&#x27;</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p>要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">b64Encode</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">btoa</span>(<span class="built_in">encodeURIComponent</span>(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b64Decode</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="title function_">atob</span>(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b64Encode</span>(<span class="string">&#x27;你好&#x27;</span>) <span class="comment">// &quot;JUU0JUJEJUEwJUU1JUE1JUJE&quot;</span></span><br><span class="line"><span class="title function_">b64Decode</span>(<span class="string">&#x27;JUU0JUJEJUEwJUU1JUE1JUJE&#x27;</span>) <span class="comment">// &quot;你好&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  1<span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;1p&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;h w&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;p+q&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>取消某一个变量对于原对象的引用，不会影响到另一个变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = o1;</span><br><span class="line"></span><br><span class="line">o1 = <span class="number">1</span>;</span><br><span class="line">o2 <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果行首是一个大括号，它到底是表达式还是语句？<br>遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125; <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;) <span class="comment">// 正确</span></span><br><span class="line">(&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p>eval语句（作用是对字符串求值）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#123;foo: 123&#125;&#x27;</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;(&#123;foo: 123&#125;)&#x27;</span>) <span class="comment">// &#123;foo: 123&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果没有圆括号，eval将其理解为一个代码块；加上圆括号以后，就理解成一个对象。</p>
<h6 id="属性的读取"><a href="#属性的读取" class="headerlink" title="属性的读取"></a>属性的读取</h6><p><strong>注意：对象obj的数字键0.7，加不加引号都可以，因为会被自动转为字符串。</strong></p>
<p>数值键名不能使用点运算符（因为<strong>会被当成小数点</strong>），只能使用方括号运算符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">123</span>: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="string">&#x27;a&#x27;</span> <span class="comment">//报错</span></span><br><span class="line">obj.<span class="property">a</span> <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line">obj<span class="number">.123</span> <span class="comment">// 报错</span></span><br><span class="line">obj[<span class="number">123</span>] <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>
<h6 id="属性的查看"><a href="#属性的查看" class="headerlink" title="属性的查看"></a>属性的查看</h6><p>查看一个对象本身的所有属性，可以使用Object.keys方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">key1</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">key2</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="comment">// [&#x27;key1&#x27;, &#x27;key2&#x27;]</span></span><br></pre></td></tr></table></figure>

<h6 id="属性的删除：delete-命令"><a href="#属性的删除：delete-命令" class="headerlink" title="属性的删除：delete 命令"></a>属性的删除：delete 命令</h6><p>delete命令用于删除对象的属性，删除成功后返回true。</p>
<p><strong>注意:</strong> 删除一个不存在的属性，delete不报错，而且返回true。<br>因此，不能根据delete命令的结果，认定某个属性是存在的。</p>
<blockquote>
<p>只有一种情况，delete命令会返回false，那就是该属性存在，且不得删除。</p>
</blockquote>
<blockquote>
<p>delete命令只能删除对象本身的属性，无法删除继承的属性</p>
</blockquote>
<h6 id="属性是否存在：in-运算符"><a href="#属性是否存在：in-运算符" class="headerlink" title="属性是否存在：in 运算符"></a>属性是否存在：in 运算符</h6><blockquote>
<p>in运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="string">&#x27;p&#x27;</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>可以使用对象的hasOwnProperty方法判断一下，是否为对象自身的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="属性的遍历：for…in-循环"><a href="#属性的遍历：for…in-循环" class="headerlink" title="属性的遍历：for…in 循环"></a>属性的遍历：for…in 循环</h6><p>for…in循环有两个使用注意点。</p>
<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>
<p>对象都继承了toString属性，但是for…in循环不会遍历到这个属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toString 属性是存在的</span></span><br><span class="line">obj.<span class="property">toString</span> <span class="comment">// toString() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125; <span class="comment">// 没有任何输出</span></span><br></pre></td></tr></table></figure>
<p>对象obj继承了toString属性，该属性不会被for…in循环遍历到，因为它默认是“不可遍历”的。</p>
<blockquote>
<p>如果继承的属性是可遍历的，那么就会被for…in循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用for…in的时候，应该结合使用hasOwnProperty方法，在循环内部判断一下，某个属性是否为对象自身的属性。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老张&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name</span></span><br></pre></td></tr></table></figure>
<h5 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h5><blockquote>
<p>作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  p1 = <span class="number">4</span>;</span><br><span class="line">  p2 = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">obj.<span class="property">p1</span> = <span class="number">4</span>;</span><br><span class="line">obj.<span class="property">p2</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><h6 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h6><ul>
<li>函数的name属性返回函数的名字。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">f1.<span class="property">name</span> <span class="comment">// &quot;f1&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>如果是通过变量赋值定义的函数，那么name属性返回变量名。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">f2.<span class="property">name</span> <span class="comment">// &quot;f2&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>如果变量的值是一个具名函数，那么name属性返回function关键字之后的那个函数名。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f3 = <span class="keyword">function</span> <span class="title function_">myName</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">f3.<span class="property">name</span> <span class="comment">// &#x27;myName&#x27;</span></span><br></pre></td></tr></table></figure>
<h6 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b</span>) &#123;&#125;</span><br><span class="line">f.<span class="property">length</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>length属性就是定义时的参数个数。不管调用时输入了多少个参数，length属性始终等于2。</p>
<h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h6><p>toString()方法返回一个字符串，内容是函数的源码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">a</span>();</span><br><span class="line">  <span class="title function_">b</span>();</span><br><span class="line">  <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// function f() &#123;</span></span><br><span class="line"><span class="comment">//  a();</span></span><br><span class="line"><span class="comment">//  b();</span></span><br><span class="line"><span class="comment">//  c();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>在 ES5 的规范中，JavaScript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。</p>
<p><strong>函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</strong></p>
<h5 id="参数的省略"><a href="#参数的省略" class="headerlink" title="参数的省略"></a>参数的省略</h5><p>没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显式传入undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>( , <span class="number">1</span>) <span class="comment">// SyntaxError: Unexpected token ,(…)</span></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">undefined</span>, <span class="number">1</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h5 id="传递方式"><a href="#传递方式" class="headerlink" title="传递方式"></a>传递方式</h5><p>原始类型的值（数值、字符串、布尔值），传递方式是传值传递</p>
<p>函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递</p>
<p><strong>注意：</strong> 如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  o = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(obj);</span><br><span class="line"></span><br><span class="line">obj <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>在函数f()内部，参数对象obj被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（o）的值实际是参数obj的地址，重新对o赋值导致o指向另一个地址，保存在原地址上的值当然不受影响。</p>
<h5 id="同名参数"><a href="#同名参数" class="headerlink" title="同名参数"></a>同名参数</h5><blockquote>
<p>函数f()有两个参数，且参数名都是a。取值的时候，以后面的a为准，即使后面的a没有值或被省略，也是以其为准。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>调用函数f()的时候，没有提供第二个参数，a的取值就变成了undefined。这时，如果要获得第一个a的值，可以使用arguments对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h5 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h5><p>arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">one</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h6 id="与数组的关系"><a href="#与数组的关系" class="headerlink" title="与数组的关系"></a>与数组的关系</h6><blockquote>
<p>如果要让arguments对象使用数组方法，真正的解决方法是将arguments转为真正的数组。下面是两种常用的转换方法：arguments很像数组，但它是一个对象。<br>slice方法和逐一填入新数组。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>arguments对象带有一个callee属性，返回它所对应的原函数。<br>这个属性在严格模式里面是禁用的，因此不建议使用。</p>
</blockquote>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>闭包的最大用处有两个，一个是可以读取外层函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。</p>
<p>请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIncrementor</span>(<span class="params">start</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> start++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inc = <span class="title function_">createIncrementor</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">inc</span>() <span class="comment">// 5</span></span><br><span class="line"><span class="title function_">inc</span>() <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">inc</span>() <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<h5 id="立即调用的函数表达式"><a href="#立即调用的函数表达式" class="headerlink" title="立即调用的函数表达式"></a>立即调用的函数表达式</h5><p>函数定义后立即调用的解决方法,将其放在一个圆括号里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/* code */</span> &#125;());</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/* code */</span> &#125;)();</span><br></pre></td></tr></table></figure>
<p>通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>
<h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h5><p>eval命令接受一个字符串作为参数，并将这个字符串当作语句执行。</p>
<p><strong>eval没有自己的作用域，都在当前作用域内执行</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;a = 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p><strong>使用别名执行eval，eval内部一律是全局作用域。</strong></p>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>typeof运算符会返回数组的类型是object。</p>
<p>Object.keys方法返回数组的所有键名。</p>
<p>length属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员数量会自动减少到length设置的值。</p>
<p>当数组的length属性设为2（即最大的整数键只能是1）那么整数键2（值为c）就已经不在数组中了，被自动删除了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];</span><br><span class="line">arr.<span class="property">length</span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">2</span>;</span><br><span class="line">arr <span class="comment">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>
<p><strong>设置length为不合法的值，JavaScript 会报错。</strong></p>
<p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[-<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">arr[<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">32</span>)] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">arr.<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">// &quot;a&quot;</span></span><br><span class="line">arr[<span class="number">4294967296</span>] <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure>
<p>为数组arr添加了两个不合法的数字键，结果length属性没有发生变化。这些数字键都变成了字符串键名。最后两行之所以会取到值，是因为取键值时，数字键名会默认转为字符串。</p>
<h6 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h6><p>数组的某个位置是空位，in运算符返回false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">100</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">100</span> <span class="keyword">in</span> arr <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> arr <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h6 id="for…in-循环和数组的遍历"><a href="#for…in-循环和数组的遍历" class="headerlink" title="for…in 循环和数组的遍历"></a>for…in 循环和数组的遍历</h6><p>for…in不仅会遍历数组所有的数字键，还会遍历非数字键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">a.<span class="property">foo</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure>
<p>数组的forEach方法，也可以用来遍历数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">colors.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">color</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure>
<h6 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h6><blockquote>
<p>两个逗号之间没有任何值，我们称该数组存在空位</p>
</blockquote>
<blockquote>
<p>数组的空位不影响length属性</p>
</blockquote>
<blockquote>
<p>如果最后一个元素后面有逗号，并不会产生空位。</p>
</blockquote>
<blockquote>
<p>数组的空位是可以读取的，返回undefined。</p>
</blockquote>
<blockquote>
<p>使用delete命令删除一个数组成员，会形成空位，并且不会影响length属性。</p>
</blockquote>
<p><strong>length属性不过滤空位。所以，使用length属性进行数组遍历，一定要非常小心。</strong></p>
<p>如果是空位，使用数组的forEach方法、for…in结构、以及Object.keys方法进行遍历，空位都会被跳过。<br><strong>如果某个位置是undefined，遍历的时候就不会被跳过。</strong></p>
<h6 id="类似数组的对象"><a href="#类似数组的对象" class="headerlink" title="类似数组的对象"></a>类似数组的对象</h6><p>“类似数组的对象”的根本特征，就是具有length属性。只要有length属性，就可以认为这个对象类似于数组。但是有一个问题，这种length属性不是动态值，不会随着成员的变化而变化。</p>
<p>典型的“类似数组的对象”是函数的arguments对象，以及大多数 DOM 元素集，还有字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">args</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">arguments</span> &#125;</span><br><span class="line"><span class="keyword">var</span> arrayLike = <span class="title function_">args</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arrayLike[<span class="number">0</span>] <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">arrayLike.<span class="property">length</span> <span class="comment">// 2</span></span><br><span class="line">arrayLike <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM元素集</span></span><br><span class="line"><span class="keyword">var</span> elts = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;h3&#x27;</span>);</span><br><span class="line">elts.<span class="property">length</span> <span class="comment">// 3</span></span><br><span class="line">elts <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>[<span class="number">1</span>] <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="property">length</span> <span class="comment">// 3</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>数组的slice方法可以将“类似数组的对象”变成真正的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">args</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">arguments</span> &#125;</span><br><span class="line"><span class="keyword">var</span> arrayLike = <span class="title function_">args</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>

<p>“类似数组的对象”还有一个办法可以使用数组的方法，就是通过call()把数组的方法放到对象上面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>在arguments对象上面调用forEach方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forEach 方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logArgs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="keyword">function</span> (<span class="params">elem, i</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27;. &#x27;</span> + elem);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 for 循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logArgs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27;. &#x27;</span> + <span class="variable language_">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javascript笔记</category>
      </categories>
      <tags>
        <tag>javascript笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript2022.12.03笔记</title>
    <url>/2022/12/03/javascript2022-12-03%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>脚本：不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序</p>
</blockquote>
<p>JavaScript 也是一种<strong>嵌入式</strong>（embedded）语言。</p>
<p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构</p>
<blockquote>
<p>变量提升：先解析代码，获取所有被声明的变量，然后会被提升到代码的头部，这就叫做变量提升（hoisting）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>JavaScript 语言的标识符对大小写敏感，所以a和A是两个不同的标识符。</p>
<p>标识符命名规则如下。</p>
<ul>
<li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。</li>
<li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。<br>下面这些都是合法的标识符。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arg0</span><br><span class="line">_tmp</span><br><span class="line">$elem</span><br><span class="line">π</span><br></pre></td></tr></table></figure>
<p>中文是合法的标识符，可以用作变量名。<strong>不建议这么做</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">这是多</span></span><br><span class="line"><span class="comment">行</span></span><br><span class="line"><span class="comment">注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><blockquote>
<p>多个if…else连在一起使用的时候，可以转为使用更方便的switch结构。</p>
</blockquote>
<blockquote>
<p>每个case代码块内部的break语句不能少，否则会接下去执行下一个case代码块，而不是跳出switch结构。</p>
</blockquote>
<blockquote>
<p>需要注意的是，switch语句后面的表达式，与case语句后面的表示式比较运行结果时，采用的是严格相等运算符（&#x3D;&#x3D;&#x3D;），而不是相等运算符（&#x3D;&#x3D;），这意味着比较时不会发生类型转换。</p>
</blockquote>
<h5 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h5><blockquote>
<p>不管条件是否为真，do…while循环至少运行一次，这是这种结构最大的特点。另外，while语句后面的分号注意不要省略。</p>
</blockquote>
<h5 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h5><blockquote>
<p>如果存在多重循环，不带参数的break语句和continue语句都只针对最内层循环。</p>
</blockquote>
<h5 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h5><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>
<ul>
<li>typeof运算符</li>
<li>instanceof运算符</li>
<li>Object.prototype.toString方法</li>
</ul>
<p>数值、字符串、布尔值分别返回number、string、boolean。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span> <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> <span class="comment">// &quot;boolean&quot;</span></span><br></pre></td></tr></table></figure>
<p>函数返回function。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f</span><br><span class="line"><span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure>
<p>typeof可以用来检查一个没有声明的变量，而不报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">v</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> v</span><br><span class="line"><span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>
<p>对象返回object。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="variable language_">window</span> <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>
<p>null返回object。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>空数组（[]）的类型也是object<br>在JavaScript 内部，数组本质上只是一种特殊的对象。instanceof运算符可以区分数组和对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// false</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h5 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h5><p>if语句中，它们都会被自动转为false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;undefined is false&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;null is false&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// null is false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">null</span> <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>null转为数字时，自动变成0。</p>
<p>undefined是一个表示”此处无定义”的原始值，转为数值时为NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">undefined</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 浮点数不是精确的值，所以涉及小数的比较和运算要特别小心</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span></span><br><span class="line"><span class="comment">// 2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0.3</span> - <span class="number">0.2</span>) === (<span class="number">0.2</span> - <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 提供Number对象的MAX_VALUE和MIN_VALUE属性，返回可以表示的具体的最大值和最小值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span> <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure>

<h5 id="正零和负零"><a href="#正零和负零" class="headerlink" title="正零和负零"></a>正零和负零</h5><p><strong>注意：</strong> +0或-0当作分母，返回的值是不相等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span> / +<span class="number">0</span>) === (<span class="number">1</span> / -<span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>因为除以正零得到+Infinity，除以负零得到-Infinity，这两者是不相等的</p>
<h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span> <span class="comment">// &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure>
<p>NaN不等于任何值，包括它本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>数组的indexOf方法内部使用的是严格相等运算符，所以该方法对NaN不成立。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<p>NaN在布尔运算时被当作false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>NaN与任何数（包括它自己）的运算，得到的都是NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> + <span class="number">32</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> - <span class="number">32</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> * <span class="number">32</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> / <span class="number">32</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<h5 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景一</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景二</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回Infinity。第二个场景是0除以0会得到NaN，而非0数值除以0，会返回Infinity。</p>
<ul>
<li>0乘以Infinity，返回NaN；0除以Infinity，返回0；Infinity除以0，返回Infinity。</li>
<li>Infinity加上或乘以Infinity，返回的还是Infinity。</li>
<li>Infinity减去或除以Infinity，得到NaN。</li>
<li>Infinity与null计算时，null会转成0，等同于与0的计算。</li>
<li>Infinity与undefined计算，返回的都是NaN。</li>
</ul>
<h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><p>如果字符串以0x或0X开头，parseInt会将其按照十六进制数解析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;0x10&#x27;</span>) <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>
<p>如果字符串以0开头，将其按照10进制解析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;011&#x27;</span>) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>
<p>parseInt方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt的第二个参数为10，即默认是十进制转十进制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1000&#x27;</span>, <span class="number">2</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1000&#x27;</span>, <span class="number">6</span>) <span class="comment">// 216</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1000&#x27;</span>, <span class="number">8</span>) <span class="comment">// 512</span></span><br></pre></td></tr></table></figure>
<p>如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回NaN。如果第二个参数是0、undefined和null，则直接忽略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">37</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">0</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="literal">null</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="literal">undefined</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1546&#x27;</span>, <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;546&#x27;</span>, <span class="number">2</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h5 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h5><p>isNaN只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成NaN，所以最后返回true，这一点要特别引起注意。也就是说，isNaN为true的值，有可能不是NaN，而是一个字符串。</p>
<p>对于对象和数组，isNaN也返回true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">Number</span>(&#123;&#125;)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>([<span class="string">&#x27;xzy&#x27;</span>]) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">Number</span>([<span class="string">&#x27;xzy&#x27;</span>])) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>但是，对于空数组和只有一个数值成员的数组，isNaN返回false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>([]) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>([<span class="number">123</span>]) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>([<span class="string">&#x27;123&#x27;</span>]) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>使用isNaN之前，最好判断一下数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myIsNaN</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="built_in">isNaN</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断NaN更可靠的方法是，利用NaN为唯一不等于自身的值的这个特点，进行判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">IsNaN</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> value !== value; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite()"></a>isFinite()</h5><p>isFinite方法返回一个布尔值，表示某个值是否为正常的数值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(-<span class="title class_">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isFinite</span>(-<span class="number">1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>除了Infinity、-Infinity、NaN和undefined这几个值会返回false，isFinite对于其他的数值都会返回true。</p>
]]></content>
      <categories>
        <category>javascript笔记</category>
      </categories>
      <tags>
        <tag>javascript笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>element-Ui table只显示一行超出文字隐藏为...，鼠标移入显示所有内容。:show-overflow-tooltip=“true“，并设置弹出内容的宽度。</title>
    <url>/2022/12/02/%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>给el-table-column设置:show-overflow-tooltip&#x3D;”true”属性可以使单元格超出的内容自动折叠显示为…当鼠标移入时单元格的上方会弹出一个小tips来显示单元格得所有内容。</p>
<blockquote>
<p>:show-overflow-tooltip&#x3D;”true”</p>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">cell-dblclick</span>=<span class="string">&quot;copyText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">border</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in bottomCol&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:prop</span>=<span class="string">&quot;item.prop&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span> //<span class="attr">前边一定要加</span> <span class="attr">:</span> <span class="attr">冒号否则报错</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h4><p>有时候因为table中的文字非常的多，而show-overflow-tooltip默认是把折叠的内容全部折叠为一行。那么当文字多的时候视觉体验就会变得比较差。</p>
<p><img src="/images/source/tooltip%E6%8F%90%E7%A4%BA.jpg" alt="tooltip提示" title="tooltip提示"></p>
<p>tips的class名为.el-tooltip__popper，开始我试着直接通过它class名来给tips设置样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-class">.el-tooltip__popper</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">20%</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>发现并没有效果，后来发现是因为scoped导致的。但是如果去掉scoped样式，那么这个组件的其他style样式就会影响到所有组件。所以我们需要新建一个style标签来修改tips的样式。</p>
<p><img src="/images/source/tooltip%E6%8F%90%E7%A4%BA2.jpg" alt="tooltip效果" title="tooltip效果"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.el-tooltip__popper</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">20%</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>element</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>Invalid prop: type check failed for prop “span“. Expected Number with value 8, got String with value</title>
    <url>/2022/12/02/Invalid%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h4><p>之所以出现这个问题是因为少一个冒号，span之前有一个冒号。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">8</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>错题本</category>
      </categories>
      <tags>
        <tag>Vue错误</tag>
      </tags>
  </entry>
  <entry>
    <title>GET http://192.168.0.102:8080/sockjs-node/info?t=1647433830643 net::ERR_CONNECTION_REFUSED解决方法</title>
    <url>/2022/12/02/GET_http%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h4><p>首先 sockjs-node是一个JavaScript库，提供跨浏览器JavaScript的API，创建了一个低延迟、全双工的浏览器和web服务器之间通信通道。</p>
<p>服务端：sockjs-node（<a href="https://github.com/sockjs/sockjs-node%EF%BC%89">https://github.com/sockjs/sockjs-node）</a><br>客户端：sockjs-clien（<a href="https://github.com/sockjs/sockjs-client%EF%BC%89">https://github.com/sockjs/sockjs-client）</a></p>
<p>如果你的项目没有用到 sockjs，vuecli 运行 npm run serve 之后 network<br>里面一直调研一个接口，所以我们需要从根源上关闭这个调用。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>找到这个文件：</p>
<blockquote>
<p>…&#x2F;node_modules&#x2F;sockjs-client&#x2F;dist&#x2F;sockjs.js</p>
</blockquote>
<p>在大概1600多行，找到 self.xhr.send(payload); 注释掉</p>
<p>然后重现运行</p>
]]></content>
      <categories>
        <category>错题本</category>
      </categories>
      <tags>
        <tag>Vue错误</tag>
      </tags>
  </entry>
  <entry>
    <title>解决vue中Error in render: “TypeError: Cannot read property ‘avatar‘ of undefined“</title>
    <url>/2022/12/02/%E8%A7%A3%E5%86%B3vue%E4%B8%ADError%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error in render: &quot;TypeError: Cannot read property &#x27;avatar&#x27; of undefined&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>第一种方案</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-if</span>=<span class="string">&quot;postInfo.userInfo&quot;</span>  <span class="attr">:src</span>=<span class="string">&quot;postInfo.userInfo.avatar&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在数据挂在前用v-if判断数据是否存在在进行渲染,但是这个方法有一个缺点就是,当你有很多地方用到第二层数据时候就要多处进行判断同时对会页面加载性能有影响</p>
</blockquote>
</li>
<li><p>第二种方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">postInfo</span>: &#123; </span><br><span class="line">		   <span class="attr">userInfo</span>: &#123;&#125;,</span><br><span class="line">		  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前端定义与后端返回的多层结构来接收数据</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>错题本</category>
      </categories>
      <tags>
        <tag>Vue错误</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode中如何配置markdown代码片段</title>
    <url>/2022/11/27/VSCode%E4%B8%AD%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEmarkdown%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h6 id="Vscode右下角设置⚙-gt-gt-gt-配置用户代码片段"><a href="#Vscode右下角设置⚙-gt-gt-gt-配置用户代码片段" class="headerlink" title="Vscode右下角设置⚙&gt;&gt;&gt;配置用户代码片段"></a>Vscode右下角设置⚙&gt;&gt;&gt;配置用户代码片段</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Print to ```js&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">	<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;```js&quot;</span><span class="punctuation">,</span><span class="comment">//快捷键</span></span><br><span class="line">	<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;``` js&quot;</span><span class="punctuation">,</span><span class="comment">//要输入的代码</span></span><br><span class="line">		<span class="string">&quot;$1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;```&quot;</span></span><br><span class="line">	<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建代码段js&quot;</span> <span class="comment">//描述</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h6 id="接下来在设置setting-json中添加编辑器快捷editor-quickSuggestions设置"><a href="#接下来在设置setting-json中添加编辑器快捷editor-quickSuggestions设置" class="headerlink" title="接下来在设置setting.json中添加编辑器快捷editor.quickSuggestions设置"></a>接下来在设置setting.json中添加编辑器快捷<em>editor.quickSuggestions</em>设置</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>保存后就可以用快捷键了</p>
]]></content>
      <categories>
        <category>Vscode设置快捷键</category>
      </categories>
      <tags>
        <tag>vscode快捷键</tag>
        <tag>vscode</tag>
        <tag>vscode插件</tag>
      </tags>
  </entry>
  <entry>
    <title>ayer主题文件说明</title>
    <url>/2022/11/27/ayer%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h5 id="文件名称：clipboard-ejs"><a href="#文件名称：clipboard-ejs" class="headerlink" title="文件名称：clipboard.ejs"></a>文件名称：clipboard.ejs</h5><h5 id="文件路径：’E-Hexo-littleHexo-themes-ayer-layout-partial-post’"><a href="#文件路径：’E-Hexo-littleHexo-themes-ayer-layout-partial-post’" class="headerlink" title="文件路径：’E:\Hexo\littleHexo\themes\ayer\layout\_partial\post’"></a>文件路径：’E:\Hexo\littleHexo\themes\ayer\layout\_partial\post’</h5><h5 id="文件用途：管理代码块的复制粘贴"><a href="#文件用途：管理代码块的复制粘贴" class="headerlink" title="文件用途：管理代码块的复制粘贴"></a>文件用途：管理代码块的复制粘贴</h5><hr>
]]></content>
  </entry>
  <entry>
    <title>Javascript常用函数、方法速查手册</title>
    <url>/2022/11/27/Javascript%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h4 id="一、Array对象"><a href="#一、Array对象" class="headerlink" title="一、Array对象"></a>一、Array对象</h4><p>这部分主要对原生JS数组方法进行归纳</p>
<ol>
<li>indexOf()<br>搜索数组中的元素，并返回它所在的位置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li>includes()<br>判断一个数组是否包含一个指定的值。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> site = [<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;google&#x27;</span>, <span class="string">&#x27;taobao&#x27;</span>];</span><br><span class="line">site.<span class="title function_">includes</span>(<span class="string">&#x27;runoob&#x27;</span>); </span><br><span class="line"><span class="comment">// true </span></span><br><span class="line">site.<span class="title function_">includes</span>(<span class="string">&#x27;baidu&#x27;</span>); </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">arr.<span class="title function_">includes</span>(searchElement, fromIndex)</span><br><span class="line"><span class="comment">//searchElement 必须。需要查找的元素值。</span></span><br><span class="line"><span class="comment">//fromIndex 可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</span></span><br><span class="line"><span class="comment">//如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;b&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="string">&#x27;c&#x27;</span>, -<span class="number">100</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li>concat()<br>连接两个或更多的数组，并返回结果。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hege = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> stale = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> kai = [<span class="string">&quot;Robin&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> children = hege.<span class="title function_">concat</span>(stale,kai);</span><br><span class="line"><span class="comment">//children 输出结果：</span></span><br><span class="line"><span class="title class_">Cecilie</span>,<span class="title class_">Lone</span>,<span class="title class_">Emil</span>,<span class="title class_">Tobias</span>,<span class="title class_">Linus</span>,<span class="title class_">Robin</span></span><br></pre></td></tr></table></figure></li>
<li>reduce()<br>将数组元素计算为一个值（从左到右）。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">计算数组元素相加后的总和：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">total, num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> total + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = numbers.<span class="title function_">reduce</span>(getSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line"><span class="comment">//reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></span><br><span class="line"><span class="comment">//reduce() 可以作为一个高阶函数，用于函数的 compose。</span></span><br></pre></td></tr></table></figure></li>
<li>some()<br>检测数组元素中是否有元素符合指定条件。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</span></span><br><span class="line"><span class="comment">//some() 方法会依次执行数组的每个元素：</span></span><br><span class="line"><span class="comment">//如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</span></span><br><span class="line"><span class="comment">//如果没有满足条件的元素，则返回false。</span></span><br><span class="line"><span class="comment">//注意： some() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： some() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">some</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>find()<br>返回符合传入测试（函数）条件的数组元素。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</span></span><br><span class="line"><span class="comment">//find() 方法为数组中的每个元素都调用一次函数执行：</span></span><br><span class="line"><span class="comment">//当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</span></span><br><span class="line"><span class="comment">//如果没有符合条件的元素返回 undefined</span></span><br><span class="line"><span class="comment">//注意: find() 对于空数组，函数是不会执行的。</span></span><br><span class="line"><span class="comment">//注意: find() 并没有改变数组的原始值。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">find</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></li>
<li>filter()<br>检测数值元素，并返回符合条件所有元素的数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span></span><br><span class="line"><span class="comment">//注意： filter() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： filter() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">filter</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="number">32</span>,<span class="number">33</span>,<span class="number">40</span></span><br></pre></td></tr></table></figure></li>
<li>every()<br>检测数值元素的每个元素是否都符合条件。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</span></span><br><span class="line"><span class="comment">//every() 方法使用指定函数检测数组中的所有元素：</span></span><br><span class="line"><span class="comment">//如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</span></span><br><span class="line"><span class="comment">//如果所有元素都满足条件，则返回 true。</span></span><br><span class="line"><span class="comment">//注意： every() 不会对空数组进行检测。</span></span><br><span class="line"><span class="comment">//注意： every() 不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = ages.<span class="title function_">every</span>(checkAdult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为:</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>unshift()<br>向数组的开头添加一个或更多元素，并返回新的长度。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</span></span><br><span class="line"><span class="comment">//注意： 该方法将改变数组的数目。</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">unshift</span>(<span class="string">&quot;Lemon&quot;</span>,<span class="string">&quot;Pineapple&quot;</span>);</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="title class_">Lemon</span>,<span class="title class_">Pineapple</span>,<span class="title class_">Banana</span>,<span class="title class_">Orange</span>,<span class="title class_">Apple</span>,<span class="title class_">Mango</span></span><br></pre></td></tr></table></figure></li>
<li>slice()<br>选取数组的一部分，并返回一个新数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//slice() 方法可从已有的数组中返回选定的元素。</span></span><br><span class="line"><span class="comment">//slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</span></span><br><span class="line"><span class="comment">//注意： slice() 方法不会改变原始数组。</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> citrus = fruits.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="title class_">Orange</span>,<span class="title class_">Lemon</span></span><br></pre></td></tr></table></figure></li>
<li>forEach()<br>数组每个元素都执行一次回调函数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</span></span><br><span class="line"><span class="comment">//注意: forEach() 不会改变原数组</span></span><br><span class="line"><span class="comment">//注意: forEach() 对于空数组是不会执行回调函数的。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>isArray()<br>判断对象是否为数组,isArray() 方法用于判断一个对象是否为数组。<br>如果对象是数组返回 true，否则返回 false。</li>
</ol>
<h4 id="二、String对象"><a href="#二、String对象" class="headerlink" title="二、String对象"></a>二、String对象</h4><p>这部分主要对原生JS字符串方法进行归纳</p>
<ol>
<li>includes()<br>查找字符串中是否包含指定的子字符串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//includes() 方法用于判断字符串是否包含指定的子字符串。</span></span><br><span class="line"><span class="comment">//如果找到匹配的字符串则返回 true，否则返回 false。</span></span><br><span class="line"><span class="comment">//注意： includes() 方法区分大小写。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello world, welcome to the Runoob。&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">includes</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>concat()<br>连接两个或更多字符串，并返回新的字符串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;Hello &quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;world!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str1.<span class="title function_">concat</span>(str2);</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="title class_">Hello</span> world!</span><br></pre></td></tr></table></figure></li>
<li>indexOf()<br>返回某个指定的字符串值在字符串中首次出现的位置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world, welcome to the universe.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">indexOf</span>(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></li>
<li>replace()<br>在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span></span><br><span class="line"><span class="comment">//如果想了解更多正则表达式教程请查看本站的：RegExp 教程 和 our RegExp 对象参考手册.</span></span><br><span class="line"><span class="comment">//该方法不会改变原始字符串。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Visit Microsoft! Visit Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">replace</span>(<span class="string">&quot;Microsoft&quot;</span>,<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line"><span class="title class_">Visit</span> <span class="title class_">Runoob</span>!<span class="title class_">Visit</span> <span class="title class_">Microsoft</span>!</span><br></pre></td></tr></table></figure></li>
<li>slice()<br>提取字符串的片断，并在新的字符串中返回被提取的部分。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>split()<br>把字符串分割为字符串数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//split() 方法用于把一个字符串分割成字符串数组。</span></span><br><span class="line"><span class="comment">//提示： 如果把空字符串 (&quot;&quot;) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</span></span><br><span class="line"><span class="comment">//注意： split() 方法不改变原始字符串。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;How are you doing today?&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//输出一个数组的值:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">How</span>,are,you,doing,today?</span><br></pre></td></tr></table></figure>
7.substr()<br>从起始索引号提取字符串中指定数目的字符。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line">llo</span><br></pre></td></tr></table></figure></li>
<li>substring()<br>提取字符串中两个指定的索引号之间的字符。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//substring() 方法用于提取字符串中介于两个指定下标之间的字符。</span></span><br><span class="line"><span class="comment">//substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。</span></span><br></pre></td></tr></table></figure></li>
<li>trim()<br>去除字符串两边的空白<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;       Runoob        &quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(str.<span class="title function_">trim</span>());</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="title class_">Runoob</span></span><br></pre></td></tr></table></figure></li>
<li>toString()<br>返回一个字符串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Runoob&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> res = str.<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="title class_">Runoob</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="三、Number-对象"><a href="#三、Number-对象" class="headerlink" title="三、Number 对象"></a>三、Number 对象</h4><p>这部分主要对原生Number对象常用的一些方法进行整理</p>
<ol>
<li>toString()<br>把数字转换为字符串，使用指定的基数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> n = num.<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li>
<li>valueOf()<br>返回一个 Number 对象的基本数字值。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一个 Number 对象的基本数字值：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> n = num.<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li>
<li>toFixed()<br>把数字转换为字符串，结果的小数点后有指定位数的数字。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把数字转换为字符串，结果的小数点后有指定位数的数字：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5.56789</span>;</span><br><span class="line"><span class="keyword">var</span> n=num.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.57</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="四、Math对象"><a href="#四、Math对象" class="headerlink" title="四、Math对象"></a>四、Math对象</h4><p>这部分主要对原生JS Math对象常用的方法进行整理</p>
<ol>
<li>random()<br>返回 0 ~ 1 之间的随机数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回介于 0（包含） ~ 1（不包含） 之间的一个随机数：</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">0.13704677732303505</span></span><br></pre></td></tr></table></figure></li>
<li>round(x)<br>四舍五入。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//round() 方法可把一个数字舍入为最接近的整数：</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">2.5</span>);</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>floor(x)<br>对 x 进行下舍入。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回小于等于x的最大整数:</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.6</span>);</span><br><span class="line"><span class="comment">//以上实例将输出：</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>ceil(x)<br>对数进行上舍入。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对一个数进行上舍入:</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.4</span>)</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="五、Date-对象"><a href="#五、Date-对象" class="headerlink" title="五、Date 对象"></a>五、Date 对象</h4><p>这部分主要对原生Date对象的方法进行整理</p>
<ol>
<li>getDate()<br>从 Date 对象返回一个月中的某一天 (1 ~ 31)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li>
<li>getDay()<br>从 Date 对象返回一周中的某一天 (0 ~ 6)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回周几的名称</span></span><br><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> weekday=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line">weekday[<span class="number">0</span>]=<span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">weekday[<span class="number">1</span>]=<span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">weekday[<span class="number">2</span>]=<span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">weekday[<span class="number">3</span>]=<span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">weekday[<span class="number">4</span>]=<span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">weekday[<span class="number">5</span>]=<span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">weekday[<span class="number">6</span>]=<span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = weekday[d.<span class="title function_">getDay</span>()];</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="title class_">Tuesday</span></span><br></pre></td></tr></table></figure></li>
<li>getFullYear()<br>从 Date 对象以四位数字返回年份。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">2021</span></span><br></pre></td></tr></table></figure></li>
<li>getHours()<br>返回 Date 对象的小时 (0 ~ 23)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getHours</span>();</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></li>
<li>getMinutes()<br>返回 Date 对象的分钟 (0 ~ 59)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure></li>
<li>getMonth()<br>从 Date 对象返回月份 (0 ~ 11)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li>getSeconds()<br>返回 Date 对象的秒数 (0 ~ 59)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> n = d.<span class="title function_">getSeconds</span>();</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">39</span></span><br></pre></td></tr></table></figure></li>
<li>setDate()<br>设置 Date 对象中月的某一天 (1 ~ 31)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setDate</span>(<span class="number">15</span>);</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"><span class="title class_">Thu</span> <span class="title class_">Apr</span> <span class="number">15</span> <span class="number">2021</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">56</span> <span class="variable constant_">GMT</span>+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure></li>
<li>setFullYear()<br>设置 Date 对象中的年份（四位数字）。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setFullYear</span>(<span class="number">2020</span>);</span><br><span class="line"><span class="comment">//输出结果:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Mon</span> <span class="title class_">Apr</span> <span class="number">06</span> <span class="number">2020</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">14</span> <span class="variable constant_">GMT</span>+<span class="number">0800</span> (中国标准时间</span><br></pre></td></tr></table></figure></li>
<li>setHours()<br>设置 Date 对象中的小时 (0 ~ 23)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setHours</span>(<span class="number">15</span>);</span><br><span class="line"><span class="comment">// 输出结果:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Tue</span> <span class="title class_">Apr</span> <span class="number">06</span> <span class="number">2021</span> <span class="number">15</span>:<span class="number">28</span>:<span class="number">28</span> <span class="variable constant_">GMT</span>+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure></li>
<li>setMinutes()<br>设置 Date 对象中的分钟 (0 ~ 59)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setMinutes</span>(<span class="number">17</span>);</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Tue</span> <span class="title class_">Apr</span> <span class="number">06</span> <span class="number">2021</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">21</span> <span class="variable constant_">GMT</span>+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure></li>
<li>setMonth()<br>设置 Date 对象中月份 (0 ~ 11)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setMonth</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="title class_">Thu</span> <span class="title class_">May</span> <span class="number">06</span> <span class="number">2021</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">44</span> <span class="variable constant_">GMT</span>+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="六、RegExp对象"><a href="#六、RegExp对象" class="headerlink" title="六、RegExp对象"></a>六、RegExp对象</h4><p>这部分主要对常用原生RegExp字符串方法进行整理</p>
<ol>
<li>exec()<br>检索字符串中指定的值。返回找到的值，并确定其位置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="comment">//查找&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/Hello/g</span>;</span><br><span class="line"><span class="keyword">var</span> result=patt.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="title class_">Hello</span></span><br></pre></td></tr></table></figure></li>
<li>test()<br>检索字符串中指定的值。返回 true 或 false。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="comment">//查找&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/Hello/g</span>;</span><br><span class="line"><span class="keyword">var</span> result=patt.<span class="title function_">test</span>(str);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>toString()<br>返回正则表达式的字符串。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;RUNOOB&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> res = patt.<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="regexp">/RUNOOB/g</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="七、全局属性"><a href="#七、全局属性" class="headerlink" title="七、全局属性"></a>七、全局属性</h4><p>这部分主要对常用的全局属性进行整理</p>
<ol>
<li>Infinity()<br>代表正的无穷大的数值。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Infinity 属性用于存放表示正无穷大的数值。</span><br><span class="line">//负无穷大是表示负无穷大一个数字值。</span><br><span class="line">//在Javascript中，超出 1.7976931348623157E+103088 的数值即为Infinity，小于 -1.7976931348623157E+103088 的数值为无穷小。</span><br></pre></td></tr></table></figure></li>
<li>NaN()<br>指示某个值是不是数字值。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//NaN 即非数值（Not a Number），NaN 属性用于引用特殊的非数字值，该属性指定的并不是不合法的数字。</span><br><span class="line">//NaN 属性 与 Number.Nan 属性相同。</span><br><span class="line">//使用 isNaN() 来判断一个值是否是数字。原因是 NaN 与所有值都不相等，包括它自己。</span><br></pre></td></tr></table></figure></li>
<li>undefined()<br>指示未定义的值。</li>
</ol>
<h4 id="八、全局方法"><a href="#八、全局方法" class="headerlink" title="八、全局方法"></a>八、全局方法</h4><p>这部分主要对常用的全局方法进行整理</p>
<ol>
<li><p>decodeURI()<br>解码某个编码的 URI。</p>
</li>
<li><p>encodeURI()<br>把字符串编码为 URI。</p>
</li>
<li><p>escape()<br>对字符串进行编码。</p>
</li>
<li><p>parseFloat()<br>parseFloat() 函数可解析一个字符串，并返回一个浮点数。<br>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
</li>
<li><p>parseInt()<br>parseInt() 函数可解析一个字符串，并返回一个整数</p>
</li>
<li><p>String()<br>把对象的值转换为字符串。</p>
</li>
<li><p>unescape()<br>对由 escape() 编码的字符串进行解码。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Javascript</tag>
        <tag>Javascript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目启动报错：Syntax Error: Error: Node Sass version 7.0.3 is incompatible with ^4.0.0.</title>
    <url>/2022/11/27/vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%9ASyntax-Error-Error-Node-Sass-version-7-0-3-is-incompatible-with-4-0-0/</url>
    <content><![CDATA[<p>第一步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall node-sass</span><br></pre></td></tr></table></figure>
<p><img src="/images/source/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.png" alt="vue启动报错" title="vue启动报错"></p>
<p>第二步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -D sass</span><br></pre></td></tr></table></figure>
<p><img src="/images/source/vue%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E4%BA%8C.png" alt="vue启动成功" title="vue启动成功"></p>
]]></content>
      <categories>
        <category>错题本</category>
      </categories>
      <tags>
        <tag>Vue错误</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>安装依赖时报错：npm ERR! code ERESOLVE npm ERR! ERESOLVE could not resolve npm ERR! npm ERR! While resolving</title>
    <url>/2022/11/27/%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9Anpm-ERR-code-ERESOLVE-npm-ERR-ERESOLVE-could-not-resolve-npm-ERR-npm-ERR-While-resolving/</url>
    <content><![CDATA[<p><strong>错误原因</strong>：可能是npm版本问题报错</p>
<p><strong>解决方法</strong>：在完整的指令后面添加–legacy-peer-deps</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--legacy-peer-deps**</span><br></pre></td></tr></table></figure>

<p>即以下这种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios -S --legacy-peer-deps</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>错题本</category>
      </categories>
      <tags>
        <tag>安装依赖时报错</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON的parse与stringify区别</title>
    <url>/2022/11/27/JSON%E7%9A%84parse%E4%B8%8Estringify%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="一、JSON-parse-与JSON-stringify-的区别"><a href="#一、JSON-parse-与JSON-stringify-的区别" class="headerlink" title="一、JSON.parse()与JSON.stringify()的区别"></a>一、JSON.parse()与JSON.stringify()的区别</h4><blockquote>
<p>JSON.parse()将JSON字符串转为一个对象，而JSON.stringify()是将 JavaScript 对象转换为 JSON 字符串.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&#x27;&#123; &quot;sites&quot; : [&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">//obj = JSON.parse(text);</span></span><br><span class="line">&#123;<span class="attr">sites</span>: <span class="title class_">Array</span>(<span class="number">3</span>)&#125;<span class="attr">sites</span>: <span class="title class_">Array</span>(<span class="number">3</span>)<span class="number">0</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;<span class="number">1</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Google&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.google.com&#x27;</span>&#125;<span class="number">2</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Taobao&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;www.taobao.com&#x27;</span>&#125;<span class="attr">length</span>: <span class="number">3</span>[[<span class="title class_">Prototype</span>]]: <span class="title class_">Array</span>(<span class="number">0</span>)[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span></span><br><span class="line"><span class="comment">//str = JSON.stringify(obj)</span></span><br><span class="line">&#123;<span class="string">&quot;sites&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Google&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Taobao&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.taobao.com&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>注：使用JSON.parse()时，字符串必须符合JSON格式，即键值都必须使用双引号包裹：</strong></em>❤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(a));   <span class="comment">// Array [1,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(b));  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h4 id="两者的用法"><a href="#两者的用法" class="headerlink" title="两者的用法"></a>两者的用法</h4><h6 id="让localStorage-x2F-sessionStorage可以存储对象"><a href="#让localStorage-x2F-sessionStorage可以存储对象" class="headerlink" title="让localStorage&#x2F;sessionStorage可以存储对象"></a>让localStorage&#x2F;sessionStorage可以存储对象</h6><p>在开发过程中，我们存储的数据大部分为对象类型，但是localStorage&#x2F;sessionStorage只能存储为字符串类型，所以，我们在使用的时候就可以配合JSON.parse()与JSON.stringify()来存取数据</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>JSON.stringify()与toString()的区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr);    <span class="comment">// &#x27;[1,2,3]&#x27;</span></span><br><span class="line">arr.<span class="title function_">toString</span>();    <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>
<p>两者都是可以把数组转为字符串，但是，JSON.stringify() 面向的更多是对象，toString() 并不能对 { name : ‘lxy’ } 这类对象实现你想要的操作，面向的更多是数字。</p>
]]></content>
      <categories>
        <category>JSON的parse与stringify</category>
      </categories>
      <tags>
        <tag>JSON的parse与stringify</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue路由传参三种方式</title>
    <url>/2022/11/27/Vue%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>params传参</li>
<li>路由属性配置传参</li>
<li>query传参</li>
</ul>
<h4 id="一、params传参"><a href="#一、params传参" class="headerlink" title="一、params传参"></a>一、params传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; </span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;admin&quot;</span>,　　　　</span><br><span class="line">	<span class="comment">//这里的params是一个对象，id是属性名，item.id是值(可以从当前组件或者Vue实例上直接取) </span></span><br><span class="line">	<span class="attr">params</span>:&#123;<span class="attr">id</span>:item.<span class="property">id</span>&#125; </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123;　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>,　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过params传递参数，如果我们想获取 id 的参数值，可以通过this.$route.params.id这种方式来打印出来就可以得到了；</p>
<p><em><strong>注意：获取参数的时候是 $route，跳转和传参的时候是 $router</strong></em></p>
<h4 id="二、路由属性配置传参："><a href="#二、路由属性配置传参：" class="headerlink" title="二、路由属性配置传参："></a>二、路由属性配置传参：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;/admin/$&#123;item.id&#125;&quot;</span>, </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123; 　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin:id&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过路由属性配置传参我们可以用this.$route.params.id来获取到 id 的值，</p>
<p>注意 this. $router.push 方法里面路径带的是值，路由配置项那里带的是变量名(属性名)来实现的对应；</p>
<p>以上两种传参方式基本上可以理解为 ajax 中的 post 请求方式，<em><strong>参数都是不可见</strong></em>的，但是上面两种方法都有一个弊端，就是当<em><strong>页面刷新了是获取不到参数值的</strong></em>，那么有没有一种方法是页面刷新之后参数依然存在呢？</p>
<h4 id="三、query传参"><a href="#三、query传参" class="headerlink" title="三、query传参"></a>三、query传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; </span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;/admin&quot;</span>,　　　　 </span><br><span class="line">	<span class="attr">query</span>:&#123;id：item.<span class="property">id</span>&#125; </span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个组件对应的路由配置 </span></span><br><span class="line">&#123; 　　</span><br><span class="line">	<span class="comment">//组件路径 </span></span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件别名 </span></span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>, 　　</span><br><span class="line">	<span class="comment">//组件名 </span></span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">Admin</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种方式是用 query 来传参，这种方式是可以解决页面刷新参数消失问题的，这种方式可以理解为是 ajax 中的 get 方法，参数是直接在 url 后面添加的，参数是可见的，所以解决页面刷新参数消失问题建议使用此方法来解决；</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>（1）params传参</p>
<p>只能用 name，不能用 path。</p>
<p>地址栏不显示参数名称 id，但是有参数的值。</p>
<p>（2）query传参</p>
<p>name 和 path 都能用。用 path 的时候，提供的 path 值必须是相对于根路径的相对路径，而不是相对于父路由的相对路径，否则无法成功访问。</p>
<blockquote>
<p>地址栏显示参数格式为?id&#x3D;0&amp;code&#x3D;1</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue传参</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue路由</tag>
        <tag>Vue路由传参</tag>
      </tags>
  </entry>
  <entry>
    <title>JS时间戳和时间之间转换</title>
    <url>/2022/11/27/JS%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E6%97%B6%E9%97%B4%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>一、时间转换时间戳</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//时间对象</span></span><br><span class="line"><span class="keyword">var</span> str = date.<span class="title function_">getTime</span>(); <span class="comment">//转换成时间戳</span></span><br></pre></td></tr></table></figure>
<p>二、时间戳转换为时间</p>
<ol>
<li>转换成形如 2018年1月4日 14:00:00 格式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params">date</span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">toLocaleString</span>(); </span><br><span class="line">    <span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>也可以这样<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也很简单</span></span><br><span class="line"><span class="keyword">var</span> strtime = <span class="string">&#x27;2014-04-23 18:55:49:123&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(strtime.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 有三种方式获取，在后面会讲到三种方式的区别</span></span><br><span class="line">time1 = date.<span class="title function_">getTime</span>();</span><br><span class="line">time2 = date.<span class="title function_">valueOf</span>();</span><br><span class="line">time3 = <span class="title class_">Date</span>.<span class="title function_">parse</span>(date);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">三种获取的区别：</span></span><br><span class="line"><span class="comment">第一、第二种：会精确到毫秒</span></span><br><span class="line"><span class="comment">第三种：只能精确到秒，毫秒将用0来代替</span></span><br><span class="line"><span class="comment">比如上面代码输出的结果(一眼就能看出区别)：</span></span><br><span class="line"><span class="comment">1398250549123</span></span><br><span class="line"><span class="comment">1398250549123</span></span><br><span class="line"><span class="comment">1398250549000 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
<li>转换成更多其他的格式：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的一句代码</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(时间戳); <span class="comment">//获取一个时间对象</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1. 下面是获取时间日期的方法，需要什么样的格式自己拼接起来就好了</span></span><br><span class="line"><span class="comment"> 2. 更多好用的方法可以在这查到 -&gt; http://www.w3school.com.cn/jsref/jsref_obj_date.asp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">date.<span class="title function_">getFullYear</span>();  <span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">date.<span class="title function_">getMonth</span>();  <span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">date.<span class="title function_">getDate</span>();  <span class="comment">// 获取日(1-31)</span></span><br><span class="line">date.<span class="title function_">getTime</span>();  <span class="comment">// 获取时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">date.<span class="title function_">getHours</span>();  <span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">date.<span class="title function_">getMinutes</span>();  <span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">date.<span class="title function_">getSeconds</span>();  <span class="comment">// 获取秒数(0-59)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="comment">// 比如需要这样的格式 yyyy-MM-dd hh:mm:ss</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1398250549490</span>);</span><br><span class="line">Y = date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">M = (date.<span class="title function_">getMonth</span>()+<span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span>+(date.<span class="title function_">getMonth</span>()+<span class="number">1</span>) : date.<span class="title function_">getMonth</span>()+<span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">D = date.<span class="title function_">getDate</span>() + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">h = date.<span class="title function_">getHours</span>() + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">m = date.<span class="title function_">getMinutes</span>() + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">s = date.<span class="title function_">getSeconds</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(Y+M+D+h+m+s); </span><br><span class="line"><span class="comment">// 输出结果：2014-04-23 18:55:49</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS时间戳和时间之间转换</category>
      </categories>
  </entry>
  <entry>
    <title>Electron热加载</title>
    <url>/2022/11/27/Electron%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="安装Electron热加载插件"><a href="#安装Electron热加载插件" class="headerlink" title="安装Electron热加载插件"></a>安装Electron热加载插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在项目的根目录下安装 electron-reloader，国内建议使用 cnpm 代替 npm</span><br><span class="line">npm install electron-reloader --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="导入热加载插件"><a href="#导入热加载插件" class="headerlink" title="导入热加载插件"></a>导入热加载插件</h4><p>打开项目下的 package.json 文件，找到里面配置的入口文件。<br>如图我这里配置的是 main.js 文件：</p>
<p><img src="/images/source/electron%E7%83%AD%E5%8A%A0%E8%BD%BD.png" alt="electron热加载" title="electron热加载"></p>
<p>打开入口文件，导入热加载插件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在入口文件对的顶部配置热加载</span></span><br><span class="line"><span class="comment">// 热加载</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">&#x27;electron-reloader&#x27;</span>)(<span class="variable language_">module</span>, &#123;&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (_) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>然后保存并重新手动运行项目，热加载就能生效了。修改了代码后直接保存就能触发热加载自动更新运行项目，再也不需要反复手动运行项目了。</p>
]]></content>
      <categories>
        <category>Electron</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>博客内容格式配置与说明</title>
    <url>/2022/11/27/README/</url>
    <content><![CDATA[<blockquote>
<p>编写博客标题说明</p>
</blockquote>
<h2 id="我的博客，这是一个说明文件"><a href="#我的博客，这是一个说明文件" class="headerlink" title="我的博客，这是一个说明文件"></a>我的博客，这是一个说明文件</h2><h1 id="标题一-1"><a href="#标题一-1" class="headerlink" title="标题一|1 #"></a>标题一|1 #</h1><h2 id="标题二-2"><a href="#标题二-2" class="headerlink" title="标题二|2 ##"></a>标题二|2 ##</h2><h3 id="标题三-3"><a href="#标题三-3" class="headerlink" title="标题三|3 ###"></a>标题三|3 ###</h3><h4 id="标题四-4"><a href="#标题四-4" class="headerlink" title="标题四|4 ####"></a>标题四|4 ####</h4><h5 id="标题五-5"><a href="#标题五-5" class="headerlink" title="标题五|5 #####"></a>标题五|5 #####</h5><h6 id="标题-6"><a href="#标题-6" class="headerlink" title="标题|6 ######"></a>标题|6 ######</h6><blockquote>
<p>`&#96;&#96;开头`&#96;&#96;结尾是【代码块】，会出现copy字样</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hexo及主题的相关配置 #标题</span><br><span class="line">date: 2022-11-22 14:50:40 #创建日期</span><br><span class="line">categories: Hexo主题  #分类</span><br><span class="line">tags: [Hexo,yern,博客]  #标签</span><br><span class="line">top: true  #是否置顶 也可用序号代替</span><br><span class="line">archives: Hexo及主题的相关配置 #归档</span><br></pre></td></tr></table></figure>
<p>   下边的说明          路径                         alt标题</p>
<p><img src="/images/source/tooltip%E6%8F%90%E7%A4%BA2.jpg" alt="tooltip效果" title="tooltip效果"></p>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>Readme</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 在系统上禁止运行脚本</title>
    <url>/2022/11/22/vue-%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<ol>
<li>首先需要在编译器终端中执行命令：<strong>get-ExecutionPolicy</strong>，<br>终端返回 ：<strong>Restricted</strong>   &#x2F;&#x2F;表示脚本被禁止，无法使用</li>
<li>在命令行打入命令  <strong>set-ExecutionPolicy RemoteSigned：</strong>&#x2F;&#x2F;设置执行策略为RemoteSigned。<br><strong>如果显示没有权限修改 注意用管理员身份运行编辑器（vscode或hbuilder等）</strong></li>
<li>然后我们再执行 <strong>get-ExecutionPolicy</strong><br>显示<strong>RemoteSigned</strong>，即表示可以正常执行脚本命令了。</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>Vue错误</tag>
        <tag>Vue</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman汉化</title>
    <url>/2022/11/22/Postman%E6%B1%89%E5%8C%96/</url>
    <content><![CDATA[<p>（Postman默认安装路径为:C:\Users\Admin\AppData\Local\Postman）</p>
<span id="more"></span>
<ol>
<li>下载Postman对应版本汉化包，汉化包github下载地址:<a href="https://github.com/hlmd/Postman-cn/releases">https://github.com/hlmd/Postman-cn/releases</a></li>
<li>放置到postman安装路径下Postman\app-xxxx\resources，再次重新启动Postman即可完成汉化。</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>汉化</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>关于电脑显示“没有被指定在windows上运行，或者它包含错误”怎么解决？</title>
    <url>/2022/11/21/%E5%85%B3%E4%BA%8E%E7%94%B5%E8%84%91%E6%98%BE%E7%A4%BA%E2%80%9C%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8C%87%E5%AE%9A%E5%9C%A8windows%E4%B8%8A%E8%BF%90%E8%A1%8C%EF%BC%8C%E6%88%96%E8%80%85%E5%AE%83%E5%8C%85%E5%90%AB%E9%94%99%E8%AF%AF%E2%80%9D%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li><p>首先需要找到并右击名称为“菜单”按钮，接着需要在接下来弹出来的下拉菜单中的下方，找到并点击名称为”运行“按钮：</p>
</li>
<li><p>接着需要在接下来弹出来的页面框中输入“CMD”命令符，点击“确定”按钮：</p>
<span id="more"></span>
</li>
<li><p>接着只需要输入“for %1 in (%windir%\system32\*.dll) do regsvr32.exe &#x2F;s %1”命令按下回车键：</p>
</li>
<li><p>最后重启电脑桌面上就不会显示“没有被指定在windows上运行，或者它包含错误”即可解决问题了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件&amp;硬件问题汇总</category>
      </categories>
      <tags>
        <tag>windows系统</tag>
        <tag>方法</tag>
      </tags>
  </entry>
</search>
